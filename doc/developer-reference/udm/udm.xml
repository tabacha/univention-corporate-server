<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE chapter [
	<!ENTITY % extensions SYSTEM "../../stylesheets/macros.ent" >
	<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
	<!ENTITY % entities SYSTEM "../../stylesheets/macros-en.ent" >
	%extensions;
	%DocBookDTD;
	%entities;
]>
<chapter id="chap:udm">
	<title>&ucsUDM; (<acronym>UDM</acronym>)
		<indexterm><primary>Univention Directory Manager</primary><see>Directory Manager</see></indexterm>
		<indexterm><primary>Directory Manager</primary></indexterm>
		<indexterm><primary>UDM</primary><see>Directory Manager</see></indexterm>
	</title>
	<remark>PMH: Bug #31269</remark>

	<para>
		The Univention Directory Manager (<acronym>UDM</acronym>) is a wrapper for <acronym>LDAP</acronym> objects.
		Traditionally <acronym>LDAP</acronym> stores objects as a collection of attributes, which are defines by so called schemata.
		Modifying entries is slightly complicated, as there are no high-level operations to add or remove values from multi-valued attributes, or to keep the password used by different authentication schemes such as Windows <acronym>NTLM</acronym>-hashes, UNIX <acronym>MD5</acronym> hashes, or Kerberos tickets in sync.
	</para>

	<section id="udm:intro">
		<title>Introduction</title>
		<para>
			The command line client <command>udm</command> provides different modes of operation.
			<cmdsynopsis>
				<command>udm</command>
				<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> --bindpwd <replaceable>bind-password</replaceable></arg>
				<arg><replaceable>module</replaceable></arg>
				<arg><replaceable>mode</replaceable></arg>
				<arg choice="opt"><replaceable>options</replaceable></arg>
			</cmdsynopsis>
		</para>
		<variablelist>
			<varlistentry>
				<term>Creating object: <cmdsynopsis>
						<command>udm</command>
						<arg choice="plain"><replaceable>module</replaceable></arg>
						<arg choice="plain">create</arg>
						<arg choice="plain" rep="repeat">--set <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
					</cmdsynopsis>
				</term>
				<listitem>
					<programlisting language="sh"><![CDATA[
eval "$(ucr shell)"
udm container/ou create --position "$ldap_base" --set name="xxx"
					]]></programlisting>
					<para>
						Multiple <option>--set</option>s may be used to set the values of a multivalued property.
					</para>
					<para>
						The equivalent <acronym>LDAP</acronym> command would look like this:
					</para>
					<programlisting language="sh"><![CDATA[
eval "$(ucr shell)"
ldapadd -D "cn=admin,$ldap_base" -y /etc/ldap.secret <<__LDIF__
dn: uid=xxx,$ldap_base
objectClass: organizationalRole
cn: xxx
__LDIF__
					]]></programlisting>
				</listitem>
			</varlistentry>
		</variablelist>
		<variablelist>
			<varlistentry>
				<term>List object: <cmdsynopsis>
						<command>udm</command>
						<arg choice="plain"><replaceable>module</replaceable></arg>
						<arg choice="plain">list</arg>
						<group choice="opt">
							<arg choice="plain">--dn <replaceable>dn</replaceable></arg>
							<arg choice="plain">--filter <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
						</group>
					</cmdsynopsis>
				</term>
				<listitem>
					<programlisting language="sh"><![CDATA[
udm container/ou list --filter name="xxx"
					]]></programlisting>
					<programlisting language="sh"><![CDATA[
univention-ldapsearch cn=xxx
					]]></programlisting>
				</listitem>
			</varlistentry>
		</variablelist>
		<variablelist>
			<varlistentry>
				<term>Modify object: <cmdsynopsis>
						<command>udm</command>
						<arg choice="plain"><replaceable>module</replaceable></arg>
						<arg choice="plain">modify</arg>
						<group choice="opt">
							<arg choice="plain">--dn <replaceable>dn</replaceable></arg>
							<arg choice="plain">--filter <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
						</group>
						<group choice="opt" rep="repeat">
							<arg choice="plain">--set <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
							<arg choice="plain">--append <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
							<arg choice="plain">--remove <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
						</group>
					</cmdsynopsis>
				</term>
				<listitem>
					<programlisting language="sh"><![CDATA[
udm container/ou modify --dn "cn=xxx,$ldap_base" --set name="xxx"
					]]></programlisting>
					<para>
						For multivalued attributes <option>--append</option> and <option>--remove</option> can be used to add additional values or remove existing values.
						<option>--set</option> overwrites any previous value, but can also be used multiple times to specify further values.
						<option>--set</option> and <option>--append</option> should not be mixed for any property in one invocation.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<variablelist>
			<varlistentry>
				<term>Delete object: <cmdsynopsis>
						<command>udm</command>
						<arg choice="plain"><replaceable>module</replaceable></arg>
						<arg choice="plain">remove</arg>
						<group choice="opt">
							<arg choice="plain">--dn <replaceable>dn</replaceable></arg>
							<arg choice="plain">--filter <replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
						</group>
					</cmdsynopsis>
				</term>
				<listitem>
					<programlisting language="sh"><![CDATA[
udm container/ou delete --dn "cn=xxx,$ldap_base"
					]]></programlisting>
					<para>
						If <option>--filter</option> is used, it must match exactly one object.
						Otherwise <command>udm</command> refuses to delete any object.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

	<section id="udm:ea">
		<title>Packaging Extended Attributes
			<indexterm><primary>Extended Attributes</primary></indexterm>
			<indexterm><primary>Custom Attributes</primary><see>Extended Attributes</see></indexterm>
			<indexterm><primary>Directory Manager</primary><secondary>Extended Attributes</secondary><see>Extended Attributes</see></indexterm>
		</title>
		<para>
			Each <acronym>UDM</acronym> module provides a set of mappings from <acronym>LDAP</acronym> attributes to properties.
			This set is not complete, because <acronym>LDAP</acronym> objects can be extended with additional <emphasis>auxiliary objectClasses</emphasis>
			<firstterm>Extended Attributes</firstterm> can be used to extend modules to show additional properties.
			These properties can be mapped to any already defined <acronym>LDAP</acronym> attribute, but objects can also be extended by adding additional auxiliary object classes, which can provide new attributes.
		</para>
		<para>
			For packing purpose any additional LDAP schema needs to be registered on the &ucsMaster;, which is replicated from there to all other Domaincontrollers via the Listener/Notifier mechanism (see <xref linkend="chap:listener"/>).
			This is best done trough a separate schema package, which should be installed on the &ucsMaster; and &ucsBackup;.
			Since Extended Attributes are declared in <acronym>LDAP</acronym>, the commands to create them can be put into any join script (see <xref linkend="chap:join"/>).
			To be convenient, the declaration should be also included with the schema package, since installing it there does not require the Administrator to provide additional <acronym>LDAP</acronym> credentials.
		</para>
		<para>
			An Extended Attribute is created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
			The module is called <classname>settings/extended_attribute</classname>.
			Extended Attributes can be stored anywhere in the <acronym>LDAP</acronym>, but the default location would be <literal>cn=custom attributes,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
			Since the join script creating the attribute may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
		</para>
		<para>
			The module <classname>settings/extended_attribute</classname> requires many parameters.
			They are described in <olink targetdoc="ucs-4.3" targetptr="central:extendedattrs"/>.
		</para>
		<variablelist>
			<varlistentry><term><literal>name</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the attribute.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>CLIName</literal> (required)</term>
				<listitem>
					<simpara>
						An alternative name for the command line version of <acronym>UDM</acronym>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>shortDescription</literal> (required)</term>
				<listitem>
					<simpara>
						Default short description.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>translationShortDescription</literal> (optional, multiple)</term>
				<listitem>
					<simpara>
						Translation of short description.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>longDescription</literal> (required)</term>
				<listitem>
					<simpara>
						Default long description.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>translationLongDescription</literal> (optional, multiple)</term>
				<listitem>
					<simpara>
						Translation of long description.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>objectClass</literal> (required)</term>
				<listitem>
					<simpara>
						The name of an <acronym>LDAP</acronym> object class which is added to store this property.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>deleteObjectClass</literal> (optional)</term>
				<listitem>
					<simpara>
						Remove the object class when the property is unset.
						<remark>PMH: this does only work for syntax=boolean or something like that</remark>
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ldapMapping</literal> (required)</term>
				<listitem>
					<simpara>
						The name of the <acronym>LDAP</acronym> attribute the property matches to.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>syntax</literal> (optional)</term>
				<listitem>
					<simpara>
						A syntax class, which also controls the visual representation in <acronym>UDM</acronym>.
						Defaults to <literal>string</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>default</literal> (optional)</term>
				<listitem>
					<simpara>
						The default value is used when a new <acronym>UDM</acronym> object is created.
						<remark>PMH: check next</remark>
						It is also used when for an object if the option is enabled, which only then activates the property.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>valueRequired</literal> (optional)</term>
				<listitem>
					<simpara>
						A value must be entered for the property.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>multivalue</literal> (optional)</term>
				<listitem>
					<simpara>
						Controls if only a singe value or multiple values can be entered.
						This must be in sync with the <literal>SINGLE-VALUE</literal> setting of the attribute in the <acronym>LDAP</acronym> schema.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>mayChange</literal> (optional)</term>
				<listitem>
					<simpara>
						The property may be modified later.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>notEditable</literal> (optional)</term>
				<listitem>
					<simpara>
						Disable all modification of the property, even when the object is first created.
						The property is only modified through hooks.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>hook</literal> (optional)</term>
				<listitem>
					<simpara>
						The name of a Python class implementing hook functions.
						See <xref linkend="udm:hook"/> for more information.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>doNotSearch</literal> (optional)</term>
				<listitem>
					<simpara>
						If this is enabled, the property is not show in the drop-down list of properties when searching for <acronym>UDM</acronym> objects.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>tabName</literal> (optional)</term>
				<listitem>
					<simpara>
						The name of the tab in the <acronym>UMC</acronym> where the property should be displayed.
						The name of existing tabs can be copied from <acronym>UMC</acronym> session with the <literal>English</literal> locale.
						A new tab is automatically created for new names.
						<remark>PMH: check next</remark>
						If no name is given, ???
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>translationTabName</literal> (optional, multiple)</term>
				<listitem>
					<simpara>
						Translation of tab name.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>tabPosition</literal> (optional)</term>
				<listitem>
					<simpara>
						This setting is only relevant, when a new tab is created by using a <literal>tabName</literal>, for which no tab exists.
						The integer value defines the position where the newly tab is inserted.
						By default the newly created tab is appended at the end, but before the <emphasis>Extended settings</emphasis> tab.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>overwriteTab</literal> (optional)</term>
				<listitem>
					<simpara>
						If enabled, the tab declared by the <acronym>UDM</acronym> module with the name from the <literal>tabName</literal> settings is replaces by a new clean tab with only the properties defined by Extended Attributes.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>tabAdvanced</literal> (optional)</term>
				<listitem>
					<simpara>
						If this setting is enabled, the tab is created inside the <emphasis>Extended settings</emphasis> tab instead of being a tab by its own.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>groupName</literal> (optional)</term>
				<listitem>
					<simpara>
						The name of the group inside a tab where the property should be displayed.
						The name of existing groups can be copied from <acronym>UMC</acronym> session with the <literal>English</literal> locale.
						A new tab is automatically created for new names.
						If no name is given, the property is placed before the first tab.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>translationGroupName</literal> (optional, multiple)</term>
				<listitem>
					<simpara>
						Translation of group name.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>groupPosition</literal> (optional)</term>
				<listitem>
					<simpara>
						This setting is only relevant, when a new group is created by using a <literal>groupName</literal>, for which no group exists.
						The integer value defines the position where the newly group is inserted.
						By default the newly created group is appended at the end.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>overwritePosition</literal> (optional)</term>
				<listitem>
					<simpara>
						The name of an existing property this property wants to overwrite.
						<remark>PMH: In UCS-2.x this was the position number, in UCS-3.x it must be the name</remark>
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>disableUDMWeb</literal> (optional)</term>
				<listitem>
					<simpara>
						Disables showing this property in the <acronym>UMC</acronym>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>fullWidth</literal> (optional)</term>
				<listitem>
					<simpara>
						The widget for the property should span both columns.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>module</literal> (required, multiple)</term>
				<listitem>
					<simpara>
						A list of module names where this Extended Attribute should be added to.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>options</literal> (required, multiple)</term>
				<listitem>
					<simpara>
						A list of options, which enable this Extended Attribute.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>version</literal> (required)</term>
				<listitem>
					<simpara>
						The version of the Extended Attribute format.
						The current version is <literal>2</literal>.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<tip>
			<para>
				Create the Extended Attribute first through <acronym>UMC-UDM</acronym>.
				Modify it until you're satisfied.
				Only then dump it using <command>udm settings/extended_attribute list</command> and convert the output to an equivalent shell script creating it.
			</para>
		</tip>

		<example id="udm:ea-with-schema">
			<title>Extended Attribute for custom LDAP schema</title>
			<para>
				This example provides a simple <acronym>LDAP</acronym> schema called <filename>extended-attribute.schema</filename>, which declares one object class <literal>univentionExamplesUdmOC</literal> and one attribute <literal>univentionExamplesUdmAttribute</literal>.
			</para>
			<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="ea/extended-attribute.schema" parse="text"/></programlisting>
			<para>
w				The schema is shipped as <filename>/usr/share/extended-attribute/extended-attribute.schema</filename> and installed by calling <command>ucs_registerLDAPExtension</command> from the join-script <filename>50extended-attribute.inst</filename>.
			</para>
			<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="ea/debian/extended-attribute.postinst" parse="text"/></programlisting>
			<para>
				This script calls the join-script <filename>50extended-attribute.inst</filename>, which also creates an Extended Attribute by using the <command>udm</command> command line interface:
			</para>
			<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="ea/50extended-attribute.inst" parse="text"/></programlisting>
			<para>
				This example is deliberately missing an unjoin-script (see <xref linkend="join:unjoin"/>)  to keep this example simple.
				It should check if the Extended Attribute is no longer used in the domain and then remove it.
			</para>
		</example>

		<section id="udm:ea:select">
			<title>Selection lists
				<indexterm><primary>Extended Attributes</primary><secondary>Selection list</secondary></indexterm>
			</title>
			<para>
				Sometimes an Extended Attribute should show a list of options to choose from.
				This list can either be static or dynamic.
				After defining such a new syntax it can be used by referencing its name in the <literal>syntax</literal> property of an Extended Attribute.
			</para>
			<section id="udm:ea:select:static">
				<title>Static selections</title>
				<para>
					The static list of available selections is defined once and can not be modified interactively through <acronym>UMC</acronym>.
					Such a list is best implemented though a custom syntax class.
					As the implementation must be available on all system roles, the new syntax is best registered in <acronym>LDAP</acronym>.
					This can be done by using <command>ucs_registerLDAPExtension</command> which is described in <xref linkend="join:libraries:shell"/>.
				</para>
				<para>
					As an alternative the file can be put into the directory <filename class="directory">/usr/share/pyshared/univention/admin/syntax.d/</filename> and linked into the directory <filename class="directory">/usr/lib/pymodules/python2.7/univention/admin/syntax.d/</filename>.
					When included into a Debian package, the linking is normally done by <command>dh_python</command>.
				</para>
				<para>
					The following example is comparable to the default example in file <filename>/usr/share/pyshared/univention/admin/syntax.d/example.py</filename>:
				</para>
				<programlisting language="python"><![CDATA[
class StaticSelection(select):
	choices = [
		('value1', 'Description for selection 1'),
		('value2', 'Description for selection 2'),
		('value3', 'Description for selection 3'),
	]
				]]></programlisting>
			</section>
			<section id="udm:ea:select:dynamic">
				<title>Dynamic selections</title>
				<para>
					A dynamic list is implemented as an <acronym>LDAP</acronym> search, which is described in <xref linkend="udm:syntax:ldap"/>.
					For performance reason it is recommended to implement a class derived from <classname>UDM_Attribute</classname> or <classname>UDM_Objects</classname> instead of using <classname>LDAP_Search</classname>.
					The file <filename>/usr/share/pyshared/univention/admin/syntax.py</filename> contains several examples.
				</para>
				<example id="udm:ea:select:dynamic:example">
					<title>Dynamic selection list for Extended Attributes</title>
					<para>
						The idea is to create a container with sub-entries for each selection.
						This following listing declares a new syntax class for selecting a profession level.
					</para>
					<programlisting language="python"><![CDATA[
class DynamicSelection(UDM_Objects):
	udm_modules = ('container/cn',)
	udm_filter = '(&(objectClass=organizationalRole)(ou:dn:=DynamicSelection))'
	simple = True  # only one value is selected
	empty_value = True  # allow selecting nothing
	key = '%(name)s'  # this is stored
	label = '%(description)s'  # this is displayed
	regex = None  # no validation in frontend
	error_message = 'Invalid value'
					]]></programlisting>
					<para>
						The Python code should be put into a file named <filename>DynamicSelection.py</filename>.
						The following code registers this new syntax in <acronym>LDAP</acronym> and adds some values.
						It also creates an Extended Attribute for user objects using this syntax.
					</para>
					<programlisting language="sh"><![CDATA[
syntax='DynamicSelection'
base="cn=univention,$(ucr get ldap/base)"

udm container/ou create --position "$base" \
	--set name="$syntax" --set description='UCS profession level'
dn="ou=$syntax,$base"

udm container/cn create --position "$dn" \
	--set name="value1" --set description='UCS Guru (> 5)'
udm container/cn create --position "$dn" \
	--set name="value2" --set description='UCS Regular (1..5)'
udm container/cn create --position "$dn" \
	--set name="value3" --set description='UCS Beginner (< 1)'

udm container/cn create --ignore_exists --position "$base" \
	--set name='udm_syntax'
dn="cn=udm_syntax,$base"
udm settings/udm_syntax create --position "$dn" \
	--set name="$syntax" --set filename="DynamicSelection.py" \
	--set data="$(bzip2 <DynamicSelection.py | base64)" \
	--set package="$syntax" --set packageversion="1"

udm settings/extended_attribute create --position "cn=custom attributes,$base" \
	--set name='Profession' \
	--set module='users/user' \
	--set tabName='General' \
	--set translationTabName='"de_DE" "Allgemein"' \
	--set groupName='Personal information' \
	--set translationGroupName='"de_DE" "Persönliche Informationen"' \
	--set shortDescription='UCS profession level' \
	--set translationShortDescription='"de_DE" "UCS Erfahrung"' \
	--set longDescription='Select a level of UCS experience' \
	--set translationLongDescription='"de_DE" "Wählen Sie den Level der Erfahrung mit UCS"' \
	--set objectClass='univentionFreeAttributes' \
	--set ldapMapping='univentionFreeAttribute1' \
	--set syntax="$syntax" --set mayChange=1 --set valueRequired=0
					]]></programlisting>
				</example>
			</section>
		</section>

		<section id="udm:ea:issues">
			<title>Known issues</title>
			<itemizedlist>
				<listitem>
					<simpara>
						The <literal>tabName</literal> and <literal>groupName</literal> values must exactly match the values already used in the modules.
						If they do not match, a new tab or group is added.
						This also applies to the translation:
						They must match the already translated strings and must be repeated for every Extended Attribute again and again.
						The untranslated strings are best extracted directly from the Python source code of the modules in <filename>/usr/share/pyshared/univention/admin/handlers/*/*.py</filename>.
						For the translated strings run <command>msgunfmt /usr/share/locale/<replaceable>language-code</replaceable>/LC_MESSAGES/univention-admin*.mo</command>.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						The <literal>overwritePosition</literal> values must exactly match the name of an already defined property.
						Otherwise <acronym>UDM</acronym> will crash.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Extended Attributes may be removed, when matching data is still stored in <acronym>LDAP</acronym>.
						The schema on the other hand must only be removed when all matching data is removed.
						Otherwise the server <command>slapd</command> will fail to start.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
						Removing <literal>objectClass</literal>es from <acronym>LDAP</acronym> objects must be done manually.
						Currently <acronym>UDM</acronym> does not provide any functionality to remove unneeded object classes or methods to force-remove an object class including all attributes, for which the object class is required.
					</simpara>
				</listitem>
			</itemizedlist>
		</section>

		<section id="udm:ea:option">
			<title>Extended Options
				<indexterm><primary>Extended Attributes</primary><secondary>Options</secondary></indexterm>
			</title>
			<remark>PMH: Bug #21912</remark>
			<para>
				<acronym>UDM</acronym> properties can be enabled and disabled via <firstterm>options</firstterm>.
				For example all properties of a user related to Samba can be switched on or off to reduce the settings shown to an administrator.
				If many Extended Attributes are added to a <acronym>UDM</acronym> module, it might proof necessary to also create new options.
				Options are per <acronym>UDM</acronym> module.
			</para>
			<para>
				Similar to Extended Attributes an Extended Option is created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
				The module is called <classname>settings/extended_options</classname>.
				Extended Options can be stored anywhere in the <acronym>LDAP</acronym>, but the default location would be <literal>cn=custom attributes,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
				Since the join script creating the option may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
			</para>
			<para>
				The module <classname>settings/extended_options</classname> has the following properties:
			</para>
			<variablelist>
				<varlistentry><term><literal>name</literal> (required)</term>
					<listitem>
						<simpara>
							Name of the option.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>shortDescription</literal> (required)</term>
					<listitem>
						<simpara>
							Default short description.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>translationShortDescription</literal> (optional, multiple)</term>
					<listitem>
						<simpara>
							Translation of short description.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>longDescription</literal> (required)</term>
					<listitem>
						<simpara>
							Default long description.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>translationLongDescription</literal> (optional, multiple)</term>
					<listitem>
						<simpara>
							Translation of long description.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>default</literal> (optional)</term>
					<listitem>
						<simpara>
							Enable the option by default.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>editable</literal> (optional)</term>
					<listitem>
						<simpara>
							Option may be repeatedly turned on and off.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>module</literal> (required, multiple)</term>
					<listitem>
						<simpara>
							A list of module names where this Extended Option should be added to.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>objectClass</literal> (optional, multiple)</term>
					<listitem>
						<simpara>
							A list of <acronym>LDAP</acronym> object classes, which when found, enable this option.
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
			<example id="udm:eo">
				<title>Extended Option</title>
				<programlisting language="sh">
eval "$(ucr shell)"
udm settings/extended_options create "$@" --ignore_exists \
	--position "cn=custom attributes,cn=univention,$ldap_base" \
	--set name="My Option" \
	--set shortDescription="Example option" \
	--set translationShortDescription='"de_DE" "Beispieloption"' \
	--set longDescription="An example option" \
	--set translationLongDescription='"de_DE" "Eine Beispieloption"' \
	--set default=0 \
	--set editable=0 \
	--set module="users/user" \
	--set objectClass=univentionExamplesUdmOC
				</programlisting>
			</example>
		</section>

		<section id="udm:hook">
			<title>Extended Attribute Hooks
				<indexterm><primary>Extended Attributes</primary><secondary>Hooks</secondary></indexterm>
			</title>
			<remark>PMH: Bug #25053</remark>
			<!-- http://wiki.univention.de/index.php?title=Erstellen_eines_erweiterten_Attributs_mit_Hook -->
			<para>
				Hooks provide a mechanism to pre- and post-process the values of Extended Attributes.
				Normally <acronym>UDM</acronym> properties are stored as-is in <acronym>LDAP</acronym> attributes.
				Hooks can modify the <acronym>LDAP</acronym> operations when an object is created, modified, deleted or retrieved.
				They are implemented in Python and the file must be placed in the directory <filename class="directory">/usr/share/pyshared/univention/admin/hooks.d/</filename><footnote>
					<simpara>
						This assumes that the hook file is packaged and linked by <command>dh_pysupport</command> to <filename>/usr/lib/pymodules/python<replaceable>2.7</replaceable>/univention/admin/hooks.d/</filename> for Python 2.7 or whatever Python version is used.
						If the file is installed manually, it must be placed on a path listed in <literal>sys.path</literal>.
					</simpara>
				</footnote>.
				The file name must end with <filename class="extension">.py</filename>.
			</para>
			<para>
				The module <package>univention.admin.hook</package> provides the class <classname>simpleHook</classname>, which implements all required hook functions.
				By default they don't modify any request but do log all calls.
				This class should be used as a base class for inheritance.
			</para>
			<!-- http://wiki.univention.de/index.php?title=Entwicklung_und_Integration_eigener_Module_in_Univention_Directory_Manager -->
			<variablelist>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_open</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called by the default <methodname>open</methodname> handler just before the current state of all properties is saved.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_ldap_pre_create</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called before a <acronym>UDM</acronym> object is created.
							It is called after the module validated all properties but before the <firstterm>add-list</firstterm> is created.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<type>list</type>
							<methodname>hook_ldap_addlist</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
							<methodparam><parameter>al</parameter><initializer>[]</initializer></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called before a <acronym>UDM</acronym> object is created.
							It gets passed a list of two-tuples <literal>(ldap-attribute-name, list-of-values)</literal> which will be used to create the <acronym>LDAP</acronym> object.
							The method must return the (modified) list.
							Notice that <methodname>hook_ldap_modlist</methodname> will also be called next.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_ldap_post_create</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called after the object was created in <acronym>LDAP</acronym>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_ldap_pre_modify</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called before a <acronym>UDM</acronym> object is modified.
							It is called after the module validated all properties but before the <firstterm>modification-list</firstterm> is created.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<type>list</type>
							<methodname>hook_ldap_modlist</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
							<methodparam><parameter>ml</parameter><initializer>[]</initializer></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called before a <acronym>UDM</acronym> object is created or modified.
							It gets passed a list of tuples, which are either two-tuples <literal>(ldap-attribute-name, list-of-new-values)</literal> or three-tuples <literal>(ldap-attribute-name, list-of-old-values, list-of-new-values)</literal>.
							It will be used to create or modify the <acronym>LDAP</acronym> object.
							The method must return the (modified) list.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_ldap_post_modify</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called after the object was modified in <acronym>LDAP</acronym>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_ldap_pre_remove</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called before a <acronym>UDM</acronym> object is removed.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<methodsynopsis>
							<methodname>hook_ldap_post_remove</methodname>
							<methodparam><parameter>self</parameter></methodparam>
							<methodparam><parameter>obj</parameter></methodparam>
						</methodsynopsis>
					</term>
					<listitem>
						<simpara>
							This method is called after the object was removed from <acronym>LDAP</acronym>.
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				The following example implements a hook, which removes the object-class <literal>univentionFreeAttributes</literal> if the property <literal>isSampleUser</literal> is no longer set.
			</para>
			<programlisting language="python"><![CDATA[
from univention.admin.hook import simpleHook

class RemoveObjClassUnused(simpleHook):
	type = 'RemoveObjClassUnused'

	def hook_ldap_post_modify(self, obj):
		"""Remove unused objectClass."""
		ext_attr_name = 'isSampleUser'
		class_name = 'univentionFreeAttributes'

		if obj.oldinfo.get(ext_attr_name) in ('1',) and \
				obj.info.get(ext_attr_name) in ('0', None):
			if class_name in obj.oldattr.get('objectClass', []):
				obj.lo.modify(obj.dn,
					[('objectClass', class_name, '')])
			]]></programlisting>
			<para>
				After installing the file the hook can be activated by setting the <literal>hook</literal> property of an Extended Attribute to <classname>RemoveObjClassUnused</classname>:
			</para>
			<programlisting language="python"><![CDATA[
udm settings/extended_attribute modify \
	--dn ... \
	--set hook=RemoveObjClassUnused
			]]></programlisting>
			</section>
	</section>

	<section id="udm:modules">
		<title>UDM Modules
			<indexterm><primary>Directory Manager</primary><secondary>Custom Modules</secondary></indexterm>
		</title>
		<remark>PMH: Bug #29525</remark>
		<para>
		  The development of Univention Directory Manager modules is currently only documented in
		  Univention Wiki (currently only available in German):
		  <ulink url="http://wiki.univention.de/index.php?title=Entwicklung_und_Integration_eigener_Module_in_Univention_Directory_Manager"/>
		</para>
	</section>

	<section id="udm:syntax">
		<title>UDM Syntax</title>
		<remark>PMH: Bug #24236</remark>
		<para>
			Every <acronym>UDM</acronym> property has a syntax, which is used to check the value for correctness.
			&ucsUCS; already provides several syntax types, which are defined in the Python file <filename>/usr/share/pyshared/univention/admin/syntax.py</filename>.
			The following list of syntaxes is not complete, for a complete overview the file should be consulted directly.
		</para>
		<variablelist>
			<varlistentry>
				<term><classname>string</classname></term>
				<term><classname>string64</classname></term>
				<term><classname>OneThirdString</classname></term>
				<term><classname>HalfString</classname></term>
				<term><classname>TwoThirdsString</classname></term>
				<term><classname>FourThirdsString</classname></term>
				<term><classname>OneAndAHalfString</classname></term>
				<term><classname>FiveThirdsString</classname></term>
				<term><classname>TextArea</classname></term>
				<listitem>
					<simpara>
						Different string classes, which are mapped in &ucsUMC; to text input widgets with different widths and heights.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>string_numbers_letters_dots</classname></term>
				<term><classname>string_numbers_letters_dots_spaces</classname></term>
				<term><classname>IA5string</classname></term>
				<term>...</term>
				<listitem>
					<simpara>
						Different string classes with restrictions on the allowed character set.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>Upload</classname></term>
				<term><classname>Base64Upload</classname></term>
				<term><classname>jpegPhoto</classname></term>
				<listitem>
					<simpara>
						Binary data.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><classname>integer</classname></term>
				<listitem>
					<simpara>
						Positive integers.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>boolean</classname></term>
				<term><classname>booleanNone</classname></term>
				<term><classname>TrueFalse</classname></term>
				<term><classname>TrueFalseUpper</classname></term>
				<term><classname>TrueFalseUp</classname></term>
				<listitem>
					<simpara>
						Different boolean types which map to <literal>yes</literal> and <literal>no</literal> or <literal>true</literal> and <literal>false</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>hostName</classname></term>
				<term><classname>DNS_Name</classname></term>
				<term><classname>windowsHostName</classname></term>
				<term><classname>ipv4Address</classname></term>
				<term><classname>ipAddress</classname></term>
				<term><classname>hostOrIP</classname></term>
				<term><classname>v4netmask</classname></term>
				<term><classname>netmask</classname></term>
				<term><classname>IPv4_AddressRange</classname></term>
				<term><classname>IP_AddressRange</classname></term>
				<term>...</term>
				<listitem>
					<simpara>
						Different classes for host names or addresses.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>unixTime</classname></term>
				<term><classname>TimeString</classname></term>
				<term><classname>iso8601Date</classname></term>
				<term><classname>date</classname></term>
				<listitem>
					<simpara>
						Date and time.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>GroupDN</classname></term>
				<term><classname>UserDN</classname></term>
				<term><classname>UserID</classname></term>
				<term><classname>HostDN</classname></term>
				<term><classname>DomainController</classname></term>
				<term><classname>Windows_Server</classname></term>
				<term><classname>UCS_Server</classname></term>
				<term>...</term>
				<listitem>
					<simpara>
						Dynamic classes, which do an <acronym>LDAP</acronym> search to provide a list of selectable values like users, groups and hosts
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><classname>LDAP_Search</classname></term>
				<term><classname>UDM_Objects</classname></term>
				<term><classname>UDM_Attribute</classname></term>
				<listitem>
					<simpara>
						These syntaxes do an <acronym>LDAP</acronym> search and display the result as a list.
						They are further described in <xref linkend="udm:syntax:ldap"/>.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Additional syntax classes can be added by placing a Python file in <filename class="directory">/usr/share/pyshared/univention/admin/syntax.d/</filename>.
			They're automatically imported by <acronym>UDM</acronym>.
		</para>

		<section id="udm:syntax:overwrite">
			<title>UDM Syntax Override
				<indexterm><primary>Directory Manager</primary><secondary>Syntax override</secondary></indexterm>
			</title>
			<para>
				Sometimes the predefined syntax is inappropriate in some scenarios.
				This can be because of performance problems with <acronym>LDAP</acronym> searches or the need for more restrictive or lenient value checking.
				The latter case might require a change to the <acronym>LDAP</acronym> schema, since <command>slapd</command> also checks the provided values for correctness.
			</para>
			<para>
				The syntax of UDM properties can be overwritten by using &ucsUCRV;s.
				For each module and each property the variable <envar>directory/manager/web/modules/<replaceable>module</replaceable>/properties/<replaceable>property</replaceable>/syntax</envar> can be set to the name of a syntax class.
				For example <envar>directory/manager/web/modules/users/user/properties/username/syntax</envar><literal>=uid</literal> would restrict the name of users to not contain umlauts.
			</para>
			<para>
				Since UCR variables only affect the local system, the variables must be set on all systems were <acronym>UDM</acronym> is used.
				This can be either done through a &ucsUCR; policy (see <olink targetdoc="ucs-4.3" targetptr="central:policies"/>) or by setting the variable in the <filename>.postinst</filename> script of some package, which is installed on all hosts.
			</para>
		</section>

		<section id="udm:syntax:ldap">
			<title>UDM LDAP search
				<indexterm><primary>Directory Manager</primary><secondary>LDAP search</secondary></indexterm>
			</title>
			<para>
				It is often required to present a list of entries to the user, from which she can select one or — in case of a multi-valued property — more entries.
				Several syntax classes derived from <classname>select</classname> provide a fixed list of choices.
				If the set of values is known and fixed, it's best to derive an own class from <classname>select</classname> and provide the Python file in <filename class="directory">/usr/share/pyshared/univention/admin/syntax.d/</filename>.
			</para>
			<para>
				If on the other hand the list is dynamic and is stored in <acronym>LDAP</acronym>, <acronym>UDM</acronym> provides three methods to retrieve the values.
			</para>
			<variablelist>
				<varlistentry><term><classname>UDM_Attribute</classname></term>
					<listitem>
						<!-- univention-management-console-module-udm/umc/python/udm/udm_ldap.py -->
						<para>
							This class does a <acronym>UDM</acronym> search.
							For each object found all values of a multi-valued property are returned.
						</para>
						<para>
							For a derived class the following class variables can be used to customize the search:
						</para>
						<variablelist>
							<varlistentry><term>udm_module</term>
								<listitem>
									<simpara>
										The name of the <acronym>UDM</acronym> module, which does the <acronym>LDAP</acronym> search and retrieves the properties.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>udm_filter</term>
								<listitem>
									<simpara>
										An <acronym>LDAP</acronym> search filter which is used by the <acronym>UDM</acronym> module to filter the search.
										The special value <literal>dn</literal> skips the search and directly returns the property of the <acronym>UDM</acronym> object specified by <literal>depends</literal>.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>attribute</term>
								<listitem>
									<simpara>
										The name of a multi-valued <acronym>UDM</acronym> property which stores the values to be returned.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term>is_complex</term>
								<term>key_index</term>
								<term>label_index</term>
								<listitem>
									<simpara>
										Some <acronym>UDM</acronym> properties consist of multiple parts, so called <firstterm>complex</firstterm> properties.
										These variables are used to define, which part is displayed as the label and which part is used to reference the entry.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>label_format</term>
								<listitem>
									<simpara>
										A Python format string, which is used to format the <acronym>UDM</acronym> properties to a label string presented to the user.
										<literal>%(<replaceable>property-name</replaceable>)s</literal> should be used to reference properties.
										The special property name <literal>$attribute$</literal> is replaced by the value of variable <varname>attribute</varname> declared above.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>regex</term>
								<listitem>
									<simpara>
										This defines an optional regular expression, which is used in the frontend to check the value for validity.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>static_values</term>
								<listitem>
									<simpara>
										A list of two-tuples <literal>(value, display-string)</literal>, which are added as additional selection options.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>empty_value</term>
								<listitem>
									<simpara>
										If set to <literal>True</literal>, the empty value is inserted before all other static and dynamic entries.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>depends</term>
								<listitem>
									<simpara>
										This variable may contain the name of another property, which this property depends on.
										This can be used to link two properties.
										For example, one property can be used to select a server, while the second dependent property then only lists the services provided by that selected host.
										For the dependent syntax <varname>attribute</varname> must be set to <literal>dn</literal>.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>error_message</term>
								<listitem>
									<simpara>
										This error message is shown when the user enters a value which is not in the set of allowed values.
									</simpara>
								</listitem>
							</varlistentry>
						</variablelist>
						<para>
							The following example syntax would provide a list of all users with their telephone numbers:
						</para>
						<programlisting language="python"><![CDATA[
class DelegateTelephonedNumber(UDM_Attribute):
	udm_module = 'users/user'
	attribute = 'phone'
	label_format = '%(displayName)s: %($attribute$)s'
						]]></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry><term><classname>UDM_Objects</classname></term>
					<listitem>
						<para>
							This class performs a <acronym>UDM</acronym> search returning each object found.
						</para>
						<para>
							For a derived class the following class variables can be used to customize the search:
						</para>
						<variablelist>
							<varlistentry><term>udm_modules</term>
								<listitem>
									<simpara>
										A List of one or more <acronym>UDM</acronym> modules, which do the <acronym>LDAP</acronym> search and retrieve the properties.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>key</term>
								<listitem>
									<simpara>
										A Python format string generating the key value used to identify the selected object.
										The default is <literal>dn</literal>, which uses the distinguished name of the object.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>label</term>
								<listitem>
									<simpara>
										A Python format string generating the display label to represent the selected object.
										The default is <literal>None</literal>, which uses the <acronym>UDM</acronym> specific <varname>description</varname>.
										<literal>dn</literal> can be used to use the distinguished name.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>regex</term>
								<listitem>
									<simpara>
										This defines an optional regular expression, which is used in the frontend to check the value for validity.
										By default only valid distinguished names are accepted.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>simple</term>
								<listitem>
									<simpara>
										By default a widget for selecting multiple entries is used.
										Setting this variable to <literal>True</literal> changes the widget to a combo-box widget, which only allows to select a single value.
										This should be in-sync with the <literal>multivalue</literal> property of <acronym>UDM</acronym> properties.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term>use_objects</term>
								<listitem>
									<simpara>
										By default <acronym>UDM</acronym> opens each <acronym>LDAP</acronym> object through a <acronym>UDM</acronym> module implemented in Python.
										This can be a performance problem if many entries are returned.
										Setting this to <literal>False</literal> disables the Python code and directly uses the attributes returned by the <acronym>LDAP</acronym> search.
										Several properties can then no longer be used as key or label, as those are not explicitly stored in <acronym>LDAP</acronym> but are only calculated by the <acronym>UDM</acronym> module.
										For example, to get the fully qualified domain name of a host <literal>%(name)s.%(domain)s</literal> must be used instead of the calculated property <literal>%(fqdn)s</literal>.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term>udm_filter</term>
								<term>static_values</term>
								<term>empty_value</term>
								<term>depends</term>
								<term>error_message</term>
								<listitem>
									<simpara>
										Same as above with <literal>UDM_Attribute</literal>.
									</simpara>
								</listitem>
							</varlistentry>
						</variablelist>
						<para>
							The following example syntax would provide a list of all servers providing a required service:
						</para>
						<programlisting language="python"><![CDATA[
class MyServers(UDM_Objects):
	udm_modules = (
		'computers/domaincontroller_master',
		'computers/domaincontroller_backup',
		'computers/domaincontroller_slave',
		'computers/memberserver',
		)
	label = '%(fqdn)s'
	udm_filter = 'service=MyService'
						]]></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry><term><classname>LDAP_Search</classname></term>
					<listitem>
						<para>
							This is the old implementation, which should only be used, if <classname>UDM_Attribute</classname> and <classname>UDM_Objects</classname> are not sufficient.
							In addition to ease of use it has the drawback that &ucsUMC; can not do as much caching, which can lead to severe performance problems.
						</para>
						<para>
							<acronym>LDAP</acronym> search syntaxes can be declared in two equivalent ways:
						</para>
						<variablelist>
							<varlistentry>
								<term><firstterm>Python API</firstterm></term>
								<listitem>
									<simpara>
										By implementing a Python class derived from <classname>LDAP_Search</classname> and providing that implementation in <filename>/usr/share/pyshared/univention/admin/syntax.d/</filename>.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term><firstterm>UDM API</firstterm></term>
								<listitem>
									<simpara>
										By creating a <acronym>UDM</acronym> object in <acronym>LDAP</acronym> using the module <classname>settings/syntax</classname>.
									</simpara>
								</listitem>
							</varlistentry>
						</variablelist>
						<para>
							The Python API uses the following variables:
						</para>
						<variablelist>
							<varlistentry><term><varname>syntax_name</varname></term>
								<listitem>
									<simpara>
										This variable stores the common name of the <acronym>LDAP</acronym> object, which is used to define the syntax.
										It is only used internally and should never be needed when creating syntaxes programmatically.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><varname>filter</varname></term>
								<listitem>
									<simpara>
										An <acronym>LDAP</acronym> filter to find the LDAP objects providing the list of choices.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><varname>attribute</varname></term>
								<listitem>
									<simpara>
										A list of <acronym>UDM</acronym> module property definitions like "<literal>shares/share: dn</literal>".
										They are used as the human readable label for each element of the choices.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><varname>value</varname></term>
								<listitem>
									<simpara>
										The <acronym>UDM</acronym> module attribute that will be stored to identify the selected element.
										The value is specified like <literal>shares/share: dn</literal>
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><varname>viewonly</varname></term>
								<listitem>
									<simpara>
										If set to <literal>True</literal> the values can not be changed.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><varname>addEmptyValue</varname></term>
								<listitem>
									<simpara>
										If set to <literal>True</literal> the empty value is add to the list of choices.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><varname>appendEmptyValue</varname></term>
								<listitem>
									<simpara>
										Same as <varname>addEmptyValue</varname> but added at the end.
										Used to automatically choose an existing entry in the frontend.
									</simpara>
								</listitem>
							</varlistentry>
						</variablelist>
						<programlisting language="python"><![CDATA[
class MyServers(LDAP_Search):
	def __init__(self):
		LDAP_Search.__init__(self,
			filter=('(&(univentionService=MyService)'
				'(univentionServerRole=member))'),
			attribute=(
				'computers/memberserver: fqdn',
				),
			value='computers/memberserver: dn'
		)
		self.name = 'LDAP_Search'  # required workaround
						]]></programlisting>
						<para>
							The <acronym>UDM</acronym> API uses the following properties:
						</para>
						<variablelist>
							<varlistentry><term><literal>name</literal> (required)</term>
								<listitem>
									<simpara>
										The name for the syntax.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>description</literal> (optional)</term>
								<listitem>
									<simpara>
										Some descriptive text.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>filter</literal> (required)</term>
								<listitem>
									<simpara>
										An <acronym>LDAP</acronym> filter, which is used to find the objects.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>base</literal> (optional)</term>
								<listitem>
									<simpara>
										The <acronym>LDAP</acronym> base, where the search starts.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term><literal>attribute</literal> (optional, multivalued)</term>
								<term><literal>ldapattribute</literal> (optional, multivalued)</term>
								<listitem>
									<simpara>
										The name of <acronym>UDM</acronym> properties, which are display as a label to the user.
										Alternatively <acronym>LDAP</acronym> attribute names may be used directly.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term><literal>value</literal> (optional)</term>
								<term><literal>ldapvalue</literal> (optional)</term>
								<listitem>
									<simpara>
										The name of the <acronym>UDM</acronym> property, which is used to reference the object.
										Alternatively an <acronym>LDAP</acronym> attribute name may be used directly.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>viewonly</literal> (optional)</term>
								<listitem>
									<simpara>
										If set to <literal>1</literal> the values can not be changed.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>addEmptyValue</literal> (optional)</term>
								<listitem>
									<simpara>
										If set to <literal>1</literal> the empty value is add to the list of choices.
									</simpara>
								</listitem>
							</varlistentry>
						</variablelist>
						<programlisting language="sh"><![CDATA[
eval "$(ucr shell)"
udm settings/syntax create "$@" --ignore_exists \
	--position "cn=custom attributes,cn=univention,$ldap_base" \
	--set name=MyServers \
	--set filter='(&(univentionService=MyService)
		(univentionServerRole=member))' \
	--set attribute='computers/memberserver: fqdn' \
	--set value='computers/memberserver: dn'
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
	</section>

	<section id="settings:udm_hook">
		<title>Packaging UDM Hooks
			<indexterm><primary>Directory Manager</primary><secondary>Hooks</secondary><tertiary>Packaging</tertiary></indexterm>
		</title>
		<para>
			For some purposes, e.g. for app installation, it is convenient to be able to deploy a new <acronym>UDM</acronym> hook in the UCS domain
			from any system in the domain. For this purpose, a UDM hook can be stored as a special type of UDM object.
			The module responsible for this type of objects is called <classname>settings/udm_hook</classname>. As these objects are replicated throughout the
			UCS domain, the UCS servers listen for modifications on these objects and integrate them into the local <acronym>UDM</acronym>.
		</para>
		<para>
			The commands to create the <acronym>UDM</acronym> hook objects in UDM may be put into any join script (see <xref linkend="chap:join"/>).
			Like every <acronym>UDM</acronym> object a <acronym>UDM</acronym> hook object can be created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
			<acronym>UDM</acronym> hook objects can be stored anywhere in the <acronym>LDAP</acronym> directory, but the recommended location would be <literal>cn=udm_hook,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
			Since the join script creating the attribute may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
		</para>
		<para>
			The module <classname>settings/udm_hook</classname> requires several parameters.
			Since many of these are determined automatically by the <command>ucs_registerLDAPExtension</command> shell library function, it is recommended to use the shell library function to create these objects (see <xref linkend="join:libraries:shell"/>).
		</para>
		<variablelist>
			<varlistentry><term><literal>name</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the UDM hook.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>data</literal> (required)</term>
				<listitem>
					<simpara>
						The actual UDM hook data in bzip2 and base64 encoded format.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>filename</literal> (required)</term>
				<listitem>
					<simpara>
						The file name the UDM hook data should be written to by the listening servers. The file name must not contain any path elements.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>package</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the Debian package which creates the object.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>packageversion</literal> (required)</term>
				<listitem>
					<simpara>
						Version of the Debian package which creates the object. For object modifications the version number needs to increase unless the package name is modified as well.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>appidentifier</literal> (optional)</term>
				<listitem>
					<simpara>
						The identifier of the app which creates the object. This is important to indicate that the object is required as long as the app is installed anywhere in the UCS domain.
						Defaults to <literal>string</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionstart</literal> (optional)</term>
				<listitem>
					<simpara>
						Minimal required UCS version. The UDM hook is only activated by systems with a version higher than or equal to this.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionend</literal> (optional)</term>
				<listitem>
					<simpara>
						Maximal required UCS version. The UDM hook is only activated by systems with a version lower than or equal to this. To  specify validity for the whole 4.1-x release range a value like 4.1-99 may be used.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>active</literal> (internal)</term>
				<listitem>
					<simpara>
						A boolean flag used internally by the &ucsMaster; to signal availability of the new UDM hook on the &ucsMaster; (default: <literal>FALSE</literal>).
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

	<section id="settings:udm_module">
		<title>Packaging UDM Extension Modules</title>
		<para>
			For some purposes, e.g. for app installation, it is convenient to be able to deploy a new <acronym>UDM</acronym> module in the UCS domain
			from any system in the domain. For this purpose, a UDM module can be stored as a special type of UDM object.
			The module responsible for this type of objects is called <classname>settings/udm_module</classname>. As these objects are replicated throughout the
			UCS domain, the UCS servers listen for modifications on these objects and integrate them into the local <acronym>UDM</acronym>.
		</para>
		<para>
			The commands to create the <acronym>UDM</acronym> module objects in UDM may be put into any join script (see <xref linkend="chap:join"/>).
			Like every <acronym>UDM</acronym> object a <acronym>UDM</acronym> module object can be created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
			<acronym>UDM</acronym> module objects can be stored anywhere in the <acronym>LDAP</acronym> directory, but the recommended location would be <literal>cn=udm_module,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
			Since the join script creating the attribute may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
		</para>
		<para>
			The module <classname>settings/udm_module</classname> requires several parameters.
			Since many of these are determined automatically by the <command>ucs_registerLDAPExtension</command> shell library function, it is recommended to use the shell library function to create these objects (see <xref linkend="join:libraries:shell"/>).
		</para>
		<variablelist>
			<varlistentry><term><literal>name</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the UDM module, e.g. <classname>newapp/someobject</classname>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>data</literal> (required)</term>
				<listitem>
					<simpara>
						The actual UDM module data in bzip2 and base64 encoded format.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>filename</literal> (required)</term>
				<listitem>
					<simpara>
						The file name the UDM module data should be written to by the listening servers. The file name may contain path elements and should conform to the name of the UDM module (e.g. <literal>newapp/someobject.py</literal>).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>messagecatalog</literal> (optional)</term>
				<listitem>
					<simpara>
						Multivalued property to supply message translation files (syntax: &lt;language tag&gt; &lt;base64 encoded GNU message catalog&gt;).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>umcregistration</literal> (optional)</term>
				<listitem>
					<simpara>
						XML definition required to make the UDM module available though the Univention Management Console (base64 encoded XML)
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>icon</literal> (optional)</term>
				<listitem>
					<simpara>
						Multivalued property to supply icons for the Univention Management Console (base64 encoded <filename class="extension">png</filename>, <filename class="extension">jpeg</filename> or <filename class="extension">svgz</filename>).
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>package</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the Debian package which creates the object.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>packageversion</literal> (required)</term>
				<listitem>
					<simpara>
						Version of the Debian package which creates the object. For object modifications the version number needs to increase unless the package name is modified as well.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>appidentifier</literal> (optional)</term>
				<listitem>
					<simpara>
						The identifier of the app which creates the object. This is important to indicate that the object is required as long as the app is installed anywhere in the UCS domain.
						Defaults to <literal>string</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionstart</literal> (optional)</term>
				<listitem>
					<simpara>
						Minimal required UCS version. The UDM module is only activated by systems with a version higher than or equal to this.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionend</literal> (optional)</term>
				<listitem>
					<simpara>
						Maximal required UCS version. The UDM module is only activated by systems with a version lower than or equal to this. To  specify validity for the whole 4.1-x release range a value like 4.1-99 may be used.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>active</literal> (internal)</term>
				<listitem>
					<simpara>
						A boolean flag used internally by the &ucsMaster; to signal availability of the new UDM module on the &ucsMaster; (default: <literal>FALSE</literal>).
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

	<section id="settings:udm_syntax">
		<title>Packaging UDM Syntax Extension</title>
		<para>
			For some purposes, e.g. for app installation, it is convenient to be able to deploy a new <acronym>UDM</acronym> syntax in the UCS domain
			from any system in the domain. For this purpose, a UDM syntax can be stored as a special type of UDM object.
			The module responsible for this type of objects is called <classname>settings/udm_syntax</classname>. As these objects are replicated throughout the
			UCS domain, the UCS servers listen for modifications on these objects and integrate them into the local <acronym>UDM</acronym>.
		</para>
		<para>
			The commands to create the <acronym>UDM</acronym> syntax objects in UDM may be put into any join script (see <xref linkend="chap:join"/>).
			Like every <acronym>UDM</acronym> object a <acronym>UDM</acronym> syntax object can be created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
			<acronym>UDM</acronym> syntax objects can be stored anywhere in the <acronym>LDAP</acronym> directory, but the recommended location would be <literal>cn=udm_syntax,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
			Since the join script creating the attribute may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
		</para>
		<para>
			The module <classname>settings/udm_syntax</classname> requires several parameters.
			Since many of these are determined automatically by the <command>ucs_registerLDAPExtension</command> shell library function, it is recommended to use the shell library function to create these objects (see <xref linkend="join:libraries:shell"/>).
		</para>
		<variablelist>
			<varlistentry><term><literal>name</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the UDM syntax.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>data</literal> (required)</term>
				<listitem>
					<simpara>
						The actual UDM syntax data in bzip2 and base64 encoded format.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>filename</literal> (required)</term>
				<listitem>
					<simpara>
						The file name the UDM syntax data should be written to by the listening servers. The file name must not contain any path elements.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>package</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the Debian package which creates the object.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>packageversion</literal> (required)</term>
				<listitem>
					<simpara>
						Version of the Debian package which creates the object. For object modifications the version number needs to increase unless the package name is modified as well.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>appidentifier</literal> (optional)</term>
				<listitem>
					<simpara>
						The identifier of the app which creates the object. This is important to indicate that the object is required as long as the app is installed anywhere in the UCS domain.
						Defaults to <literal>string</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionstart</literal> (optional)</term>
				<listitem>
					<simpara>
						Minimal required UCS version. The UDM syntax is only activated by systems with a version higher than or equal to this.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionend</literal> (optional)</term>
				<listitem>
					<simpara>
						Maximal required UCS version. The UDM syntax is only activated by systems with a version lower than or equal to this. To  specify validity for the whole 4.1-x release range a value like 4.1-99 may be used.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>active</literal> (internal)</term>
				<listitem>
					<simpara>
						A boolean flag used internally by the &ucsMaster; to signal availability of the new UDM syntax on the &ucsMaster; (default: <literal>FALSE</literal>).
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

	<!-- <section id="udm:acl"> -->
	<!-- 	<title>LDAP Access Control Lists -->
	<!-- 		<indexterm><primary>LDAP</primary><secondary>ACL</secondary></indexterm> -->
	<!-- 	</title> -->
	<!-- 	<remark>SG: might be too much</remark> -->
	<!-- 	<remark>PMH: but needed by us</remark> -->
	<!-- 	<para> -->
	<!-- 		OpenLDAP ACLs: break, continue, ... -->
	<!-- 	</para> -->
	<!-- </section> -->

	<!-- <section id="udm:ldap:common-attributes"> -->
	<!-- 	<title>Common LDAP Attributes -->
	<!-- 		<indexterm><primary>LDAP</primary><secondary>attributes</secondary></indexterm> -->
	<!-- 	</title> -->
	<!-- 	<para> -->
	<!-- 		Do not re-invent the wheel, use existing LDAP attributes. -->
	<!-- 	</para> -->
	<!-- </section> -->

</chapter>
<!-- vim:set ts=2 sw=2 noet ft=docbk:-->
