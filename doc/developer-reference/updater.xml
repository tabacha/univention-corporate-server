<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE chapter [
	<!ENTITY % extensions SYSTEM "../stylesheets/macros.ent" >
	<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
	<!ENTITY % entities SYSTEM "../stylesheets/macros-en.ent" >
	%extensions;
	%DocBookDTD;
	%entities;
]>
<chapter id="chap:updater">
	<title>Univention Updater
		<indexterm><primary>Updater</primary><secondary>System update</secondary></indexterm>
		<indexterm><primary>Update</primary><see>Updater</see></indexterm>
		<indexterm><primary>Upgrade</primary><see>Updater</see></indexterm>
	</title>
	<para>
		The Univention Updater is used for updating the software.
		It is based on the Debian <acronym>APT</acronym> tools.
		On top of that the updater provides some <acronym>UCS</acronym> specific additions.
	</para>

	<section id="updater:repositories">
		<title>Separate repositories
			<indexterm><primary>Updater</primary><secondary>Repositories</secondary></indexterm>
		</title>
		<para>
			UCS releases are provided either via <acronym>DVD</acronym> images or via online repositories.
			For each major, minor and patchlevel release there is a separate online repository.
			They are automatically added to the files in <filename class="directory">/etc/apt/sources.list.d/</filename> depending on the &ucsUCRV;s <envar>version/version</envar> and <envar>version/patchlevel</envar>, which are managed by the updater.
		</para>
		<para>
			Separate repositories are used to prevent automatic updates of software packages.
			This is done to encouraged users to thoroughly test a new release before their systems are updated.
			The only exception from this rule are the <firstterm>errata</firstterm> updates, which are put into a single repository, which is updated incrementally.
		</para>
		<para>
			Therefore the updater will include the repositories of a new release in a file called <filename>/etc/apt/sources.list.d/00_ucs_temporary_errata__components_update.list</filename> and then do the updates.
			Only at the end of a successful update are the &ucsUCRV;s updated.
		</para>
		<para>
			Additional components can be added as separate repositories using &ucsUCRV;s <envar>repository/online/component/…</envar>, which are described in <olink targetdoc="ucs-4.3" targetptr="computers::softwaremanagement::repoadd"/> manual.
			Setting the variable <envar>…/version=current</envar> can be used to mark a component as required, which blocks an upgrade until the component is available for the new release.
		</para>
	</section>

	<section id="updater:scripts">
		<title>Updater scripts
			<indexterm><primary>Updater</primary><secondary>Scripts</secondary></indexterm>
			<indexterm><primary>preup</primary><see>Updater</see></indexterm>
			<indexterm><primary>postup</primary><see>Updater</see></indexterm>
		</title>
		<para>
			In addition to the regular Debian Maintainer Scripts (see <xref linkend="deb:scripts"/>) the <acronym>UCS</acronym> updater supports additional scripts, which are called before and after each release update.
			Each <acronym>UCS</acronym> release and each component can include its own set of scripts.
		</para>
		<variablelist>
			<varlistentry>
				<term><filename>preup.sh</filename></term>
				<listitem>
					<para>
						These scripts is called before the update is started.
						If any of the scripts aborts with an exit value unequal zero, the update is canceled and never started.
						The scripts receives the version number of the next release as an command line argument.
					</para>
					<para>
						For components their <filename>preup.sh</filename> scripts is called twice:
						Once before the main release <filename>preup.sh</filename> script is called and once more after the main script was called.
						This is indicated by the additional command line argument <literal>pre</literal> respectively <literal>post</literal>, which is <emphasis>inserted before</emphasis> the version string.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>postup.sh</filename></term>
				<listitem>
					<para>
						These scripts is called after the update successfully completed.
						If any of the scripts aborts with an exit value unequal zero, the update is canceled and does not finish successfully.
						The scripts receives the same arguments as described above.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			The scripts are located in the <filename class="directory">all/</filename> component of each release and component.
			For UCS-4.3 this would be <filename>4.3/maintained/4.3-0/all/preup.sh</filename> and <filename>4.3/maintained/components/<replaceable>some-component</replaceable>/all/preup.sh</filename> for the <filename>preup.sh</filename> script.
			The same applies to the <filename>postup.sh</filename> script.
			The full process is shown in <xref linkend="updater:scripts:example"/>.
		</para>

		<section id="updater:scripts:signature">
			<title>Digital signature</title>
			<para>
				From UCS 3.2 on the scripts must be digitally signed by an <acronym>PGP</acronym> (Pretty Good Privacy) key stored in the key-ring of <citerefentry><refentrytitle>apt-key</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
				The detached signature must be placed in a separate file next to each updater scripts with the additional file name extension <filename class="extension">.gpg</filename>, that is <filename>preup.sh.gpg</filename> and <filename>postup.sh.gpg</filename>.
				These extra files are downloaded as well and any error in doing so and in the validation process aborts the updater immediately.
			</para>
			<para>
				The signatures must be updated after each change to the underlying scripts.
				This can be automated or be done manually with a command like the following:
				<command>gpg -a -u <replaceable>key-id</replaceable> --passphrase-file <replaceable>key-phrase-file</replaceable> -o <replaceable>script</replaceable>.sh.gpg -b <replaceable>script</replaceable>.sh</command>
			</para>
			<para>
				Signatures can be checked manually using the following command:
				<command>gpgv --keyring /etc/apt/trusted.gpg <replaceable>script</replaceable>.sh.gpg <replaceable>script</replaceable>.sh</command>
			</para>
		</section>
	</section>

	<section id="updater:release-update">
		<title>Release update walkthrough</title>
		<para>
			For an release update the following steps are performed.
			It assumes a single component is enabled.
			If multiple components are enabled, the order in which their scripts are called is unspecified.
			It shows which scripts are called in which order with which arguments.
		</para>

		<procedure id="updater:scripts:example">
			<title>Update process steps</title>
			<step><simpara>Create temporary source list file <filename>00_ucs_temporary_errata__components_update.list</filename></simpara></step>
			<step><simpara>Download the <filename>preup.sh</filename> and <filename>postup.sh</filename> files for the next release and all components into a temporary directory and validate their <acronym>PGP</acronym> signatures</simpara></step>
			<step><simpara>Execute <command><filename>component-preup.sh</filename> <literal>pre</literal> <replaceable>$version</replaceable></command></simpara></step>
			<step><simpara>Execute <command><filename>release-preup.sh</filename> <replaceable>$version</replaceable></command></simpara></step>
			<step><simpara>Execute <command><filename>component-preup.sh</filename> <literal>post</literal> <replaceable>$version</replaceable></command></simpara></step>
			<step><simpara>Download the new <filename>Packages</filename> and <filename>Release</filename> files. Their <acronym>PGP</acronym> signatures validated by <application>APT</application> internally.</simpara></step>
			<step><simpara>Preform the update</simpara></step>
			<step><simpara>Execute <command><filename>component-postup.sh</filename> <literal>pre</literal> <replaceable>$version</replaceable></command></simpara></step>
			<step><simpara>Execute <command><filename>release-postup.sh</filename> <replaceable>$version</replaceable></command></simpara></step>
			<step><simpara>Execute <command><filename>component-postup.sh</filename> <literal>post</literal> <replaceable>$version</replaceable></command></simpara></step>
			<step><simpara>Set the release related &ucsUCRV;s to the new version</simpara></step>
		</procedure>
	</section>

</chapter>
<!-- vim:set ts=2 sw=2 noet ft=docbk:-->
