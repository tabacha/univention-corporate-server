<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
	<!ENTITY % extensions SYSTEM "../stylesheets/macros.ent" >
	<!ENTITY % entities SYSTEM "../stylesheets/macros-en.ent" >
	%extensions;
	%entities;
]>
<book lang="en" id='app-provider-4.3'>
<bookinfo>
  <title>Univention App Center for App Providers</title>
</bookinfo>

<chapter id="introduction">
    <title>Introduction</title>

    <para>
        This document is for app providers who want to place their product
        clearly visible for a broad, professional and growing user group. It
        covers the steps on how to make the product available as an app for
        Univention App Center.
    </para>

    <section id="introduction:start">
	    <title>What is Univention App Center?</title>
        <para>
            Univention App Center is an ecosystem similar to the app stores
            known from mobile platforms like Apple or Google. It provides an
            infrastructure to build, deploy and run enterprise applications on
            Univention Corporate Server (UCS). The App Center uses well-known
            technologies like <ulink url="https://www.docker.com/">Docker</ulink>.
        </para>
    </section>

    <section id="infrastructure">
        <title>App Center infrastructure</title>

        <para>
            The ecosystem consists of the following components:
            <itemizedlist>
                <listitem>
                    <simpara>
                        <emphasis>The App</emphasis> is the software plus the
                        collection of metadata like configuration, text
                        description, logo, screenshots and more for the
                        presentation.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <emphasis>The App Center Repository</emphasis> is a
                        central server infrastructure managed by Univention
                        that stores the files and data for the app. It is the
                        installation source for the app.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <emphasis>The App Center Module on UCS</emphasis> is
                        part of the web-based management system on UCS. It is the
                        place where UCS administrators install, update and
                        uninstall apps in their UCS environment.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <emphasis>The App Catalog</emphasis> presents the app
                        portfolio on the <ulink
                            url="https://www.univention.com/products/univention-app-center/app-catalog/">
                            Univention website</ulink>.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <emphasis>The App Provider Portal</emphasis> is the
                        self-service portal for app providers where they can
                        create and maintain their app.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <emphasis>The Test App Center</emphasis> is the
                        &quot;staging area&quot; for app providers to develop
                        and test their apps.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <emphasis>Univention Corporate Server (UCS)</emphasis>
                        is the target platform for the app. UCS is technically
                        a derivative of Debian GNU/Linux.
                    </simpara>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            For building an app the app developer works with UCS, the app, the
            App Provider Portal and the Test App Center.
        </para>
    </section>
</chapter>

<chapter id="get-started">
    <title>Get Started</title>

    <para>
        This chapter describes the requirements and the steps to create an app
        for Univention App Center. After reading this chapter an app provider
        will be able to create their own app and start with a development and test cycle
        using the Test App Center.
    </para>

    <section id="app-provider-needs">
        <title>What does the app provider need?</title>

        <section id="app-provider-needs:docker-image">
            <title>Software in a Docker image</title>
            <para>
                The software needs to be provided as a <ulink
                    url="https://docs.docker.com/">Docker image</ulink>. This
                is the easiest way to deploy software in Univention App Center.
                It is also recommended to publish the Docker container to
                <ulink url="https://hub.docker.com/">Docker hub</ulink>. This
                makes referencing the image later much easier and simplifies
                the development and test cycle during development. If public
                access to the image is not wanted, it can be made private and
                granted access to the Docker Hub user
                <userinput>univention</userinput>. In this case, the image has
                to be copied manually by the App Center team to the Univention
                Docker registry.
            </para>
            <para>
                The image must have a version tag to distinguish different
                software versions. It later allows updates for the apps.
            </para>
        </section>

        <section id="app-provider-needs:portal-account">
            <title>Account for App Provider Portal</title>

            <para>
                The App Provider Portal is the app developer's place for self
                service for all the settings around the app.
            </para>

           <orderedlist>
               <listitem>
                   <simpara>
                       To start building the app, an account for the App
                       Provider Portal is needed.  Please <ulink
                           url="https://www.univention.com/products/univention-app-center/for-solution-providers/">
                           request a personal account</ulink> on the
                       Univention website and provide some context about the
                       intended app.
                   </simpara>
               </listitem>
               <listitem>
                   <simpara>
                       An email with username and instructions on how to set a
                       password is sent.
                   </simpara>
               </listitem>
               <listitem>
                   <simpara>
                       Afterwards the login can be performed at the <ulink
                           url="https://provider-portal.software-univention.de/univention-management-console/">App
                           Provider Portal</ulink>.
                   </simpara>
               </listitem>
           </orderedlist>
        </section>
    </section>

    <section id="create-app-with-docker">
        <title>Create an app with a Docker image</title>

        <para>
            This section describes how to create the app in the App
            Provider Portal and use a Docker image.
        </para>

        <para>
            <figure id="create-app-with-docker:create-app">
                <title>Add a new App</title>
                <graphic scalefit="1" width="28%" fileref="illustrations43/app_portal_new_app.png"/>
            </figure>
        </para>

        <orderedlist>
            <listitem>
                <simpara>
                    In the App Provider Portal select the
                    <guimenu>Apps</guimenu> module in the
                    <guimenu>Favorites</guimenu> or <guimenu>Software</guimenu>
                    section.
                </simpara>
            </listitem>
            <listitem>
                <simpara>
                    Click on <guimenu>Add a new App</guimenu> and provide the following settings.
                </simpara>
                    <itemizedlist>
                    <listitem>
                        <simpara>
                            <emphasis>App ID</emphasis> is like a primary key.
                            Choose it carefully, because it cannot be changed
                            once the app is released to the public.  It should
                            only use small capitals, dashes and numbers.
                            Please do not include version strings in here.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            <emphasis>App Name</emphasis> is the name of the
                            app. It is used to display the app on the overview
                            pages. This attribute can be changed any time.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            <emphasis>App Version</emphasis> is the version of
                            the app. The App Center distinguishes versions and
                            uses them to handle app updates. Once the app is
                            released, this attribute cannot be changed.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            <emphasis>UCS Version</emphasis> is the UCS version
                            the app should start to be available on. Simply
                            start with the latest available UCS version. It can
                            also be started with the oldest maintained UCS
                            version to cover the broadest user base of UCS. See
                            the <ulink
                                url="https://wiki.univention.de/index.php/Maintenance_Cycle_for_UCS">UCS
                                maintenance cycle</ulink> for an overview of
                            the maintained UCS version. In either case it is
                            recommended to specify the supported UCS versions
                            explicitly (see <xref
                                linkend="create-app-with-docker:supported-ucs-version"
                                />.
                        </simpara>


                    </listitem>
                    <listitem>
                        <simpara>
                            <emphasis>File under</emphasis> refers to the
                            organization that the app belongs to. Please select
                            the organization here or otherwise the app will not
                            show up in the listing.
                        </simpara>
                    </listitem>
                    </itemizedlist>
            </listitem>
        </orderedlist>

        <section id="create-app-with-docker:image">
            <title>Docker image</title>

            <orderedlist>
                <listitem>
                    <simpara>
                        In the app go to the tab <guimenu>Docker</guimenu>.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Activate the checkbox <guimenu>Use Docker container technology</guimenu>.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Enter the name of the image to <guimenu>Docker
                            image</guimenu>. Grab the name of the image from
                        Docker hub for example
                        <literal>univention/ucs-master-amd64:4.2-2</literal>.
                    </simpara>
                </listitem>
            </orderedlist>

            <important>
                <para>
                    Please add the version tag explicitly. The App Center
                    distinguishes different app versions and handles updates
                    accordingly.
                </para>
            </important>

            <note>
                <para>
                    The App Center does currently <ulink
                        url="https://forge.univention.org/bugzilla/show_bug.cgi?id=43612">not
                        support multi container setups</ulink>. The container
                    needs to include all services needed for the software,
                    except the database.  The App Center takes care of
                    providing a database management system directly on the
                    Docker host that can be used by the Docker container.
                    Supported are MySQL and PostgreSQL. See <xref
                        linkend="create-app-with-docker:database" />.
                </para>
            </note>
        </section>

        <section id="create-app-with-docker:supported-ucs-version">
            <title>Supported UCS versions</title>
            <para>
                Upon app creation the <option>UCS Version</option> has been
                specified. Please define the supported UCS version explicitly
                on the <guimenu>Software</guimenu> tab in the <guimenu>Advanced
                    software settings</guimenu> section.
            </para>
            <para>
                Example: The app has been created for <option>UCS
                    Version</option> <userinput>4.2</userinput>. The two
                entries for <guimenu>Supported UCS versions for App</guimenu>
                can be made: <userinput>4.2-3</userinput> and
                <userinput>4.3-0</userinput>. This means that for the
                installation of the app UCS 4.2-3 or UCS 4.3-0 are required.
            </para>
        </section>

        <section id="create-app-with-docker:description">
            <title>Logo and description</title>
            <para>
                On the app's <guimenu>General</guimenu> tab please provide a
                description in English and logos for the software. Start with
                a short and a long description. It gives an impression on how
                it will look like during later testing.
            </para>
            <para>
               On the same tab two logos can be uploaded: A default icon that is
               shown on the app tile in the overview. For optimal
               presentation it should be more of a square ratio. The second can
               be more detailed and can for example include the software name.
               Please provide the logos in SVG format.
           </para>
           <para>
               Those settings can be changed later. For a more
               detailed description of the app presentation and notes on the
               translation, please take a look at <xref
                   linkend="app-presentation" />.
           </para>
        </section>

        <section id="create-app-with-docker:defaults">
            <title>Change defaults</title>
            <para>
                In order to get the usual Docker images working, some settings in
                the App Provider Portal have to be changed. In the
                <guimenu>Life cycle scripts</guimenu> section on the
                <guimenu>Docker</guimenu> tab all Docker script drop-downs need
                to be changed to <userinput>Disabled</userinput>, unless a
                <userinput>Custom script</userinput> shall be provided.
            </para>
        </section>

        <section id="create-app-with-docker:volumes">
            <title>Persistent data with volumes</title>
            <para>
                By default files created inside a container are stored in it,
                but they don't persist when the container is no longer running,
                removed or is exchanged with a newer version. As solution
                Docker offers <ulink
                    url="https://docs.docker.com/storage/volumes/">volumes</ulink>,
                a mechanism for persisting data generated and used by Docker
                containers. A volume is a directory on the Docker host that is
                mounted inside the Docker container.
            </para>
            <para>
                <!--
                FIXME: @Dirk: There are definitions for paths and files. Both
                seems to work. Is this correct?
                -->
                To define volumes for the app, please go to the
                <guimenu>Mounted volumes</guimenu> section on the
                <guimenu>Docker</guimenu> tab. Add an entry for each volume
                and define the directory or file path on the host in the
                first field and the destination in the container in the second
                field. Leave the second field empty for the same path.
            </para>
            <para>
                For example:
                <itemizedlist>
                    <listitem>
                        <simpara>
                            <option>Host</option>: <userinput>/var/lib/app_etc</userinput>
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            <option>Docker container</option>: <userinput>/etc/app</userinput>
                        </simpara>
                    </listitem>
                </itemizedlist>
            </para>
        </section>

        <section id="create-app-with-docker:web-interface">
            <title>Web interface</title>
            <para>
                Many Docker apps expose a web interface to the outside world,
                e.g. via the port 8080. The App Center on UCS takes care to map
                this web interface from some relative link to this port and adds a
                reverse proxy configuration to the host's webserver
                configuration.
            </para>
            <para>
                In the <guimenu>Web interface</guimenu> section on the
                <guimenu>General</guimenu> tab in the app, enter the relative
                path and which ports should be proxied. For example, to map
                the container's ports 80 and 443 to
                <userinput>/myapp</userinput>, the following settings have to
                be made:
                <itemizedlist>
                    <listitem>
                        <simpara>
                            <option>Relative URL to web application</option>:
                            <userinput>/myapp</userinput>
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            <option>HTTP port of web application</option>:
                            <userinput>80</userinput>
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            <option>HTTPS port of web application</option>:
                            <userinput>443</userinput>
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            <option>Supported protocols by the container's web
                                interface</option>: On the tab
                            <guimenu>Docker</guimenu> in the section
                            <guimenu>Advanced Docker settings</guimenu>, select
                            <userinput>HTTP and HTTPS</userinput>, if both
                            protocol schemes should be covered.
                        </simpara>
                    </listitem>
                </itemizedlist>
            </para>
        </section>

        <section id="create-app-with-docker:ports">
            <title>Ports</title>
            <para>
                If the app needs to occupy ports on the host that need to be
                passed along to the container in order to work properly, they can
                be defined in the <guimenu>Port redirection</guimenu> section
                on the <guimenu>Docker</guimenu> tab. A list of ports can be
                defined that the Docker host shall exclusively acquire for the
                Docker container. Ports defined here cannot be used by other
                services or other Docker containers on the UCS host.
            </para>
            <para>
                For example, the solution exposes API under the dedicated port
                <userinput>5555</userinput>. This port would be predestined to
                be defined here.
            </para>
        </section>

        <section id="create-app-with-docker:database">
            <title>Database</title>
            <para>
                Many applications need a relational database management system
                (<wordasword>RDMS</wordasword>) somewhere in the environment to
                function properly. If the app needs such a database the App
                Center takes care of providing one directly to the Docker host.
                In two sections on the <guimenu>Docker</guimenu> tab the
                appropriate settings can
                be made.
            </para>
            <para>
                In the <guimenu>Database settings for the Docker
                    container</guimenu> section the settings for the database are
                defined. MySQL and PostgreSQL are supported. Database user,
                database name and the path to the password file can be
                specified. Upon installation of the app, the App Center
                installs the defined database on the Docker host, creates a
                database with the defined settings and saves the password in a
                file for later use.
            </para>
            <para>
                In the <guimenu>Environment database variables</guimenu> for the
                mapping of the database settings to the environment variables
                in the container are defined. For example, if the container
                expects the database hostname in <envar>DATABASE_HOST</envar>,
                it has to be entered into the field <guimenu>Variable containing
                    the server providing the database</guimenu>. There are also
                fields for the database port, user, password, database name and
                the password file.
            </para>
        </section>
    </section>
</chapter>

<chapter id="app-lifecycle">
    <title>App life cycle</title>

    <para>
        This chapter relates the life cycle of an app from the first app
        development, its life in the public to termination. The life cycle
        applies to the app overall and to every single version.
    </para>

    <section id="development">
        <title>Development</title>
        <para>
            Every app starts with its development. It involves the definition
            of the app in the App Provider Portal, providing the software
            solution as a Docker image (see <xref linkend="get-started" />)
            and the integration of the solution with UCS, for example in the
            identity management area (see <xref linkend="connection-idm" />).
            This part of the life cycle can be divided into two steps: setup
            and integration.
        </para>
    </section>

    <section id="testing">
        <title>Testing</title>
        <para>
            Testing the app is the final part of its development. It typically
            involves a combination of manual and automatic tests. In order to
            test the app with UCS, please follow these instructions.
        </para>

        <section id="testing:download">
            <title>Download UCS</title>
            <para>
                Download UCS to get a copy of UCS free of charge from
                the <ulink
                    url="https://www.univention.com/downloads/ucs-download/">Univention
                    website</ulink>. Choose an ISO image or a pre-installed
                virtual machine image for various virtualization hypervisors,
                like for example VMware (ESXi and Workstations), VirtualBox and
                KVM.
            </para>
        </section>

        <section id="testing:setup">
            <title>Initial UCS setup</title>
            <para>
                Please refer to the <ulink
                    url="https://docs.software-univention.de/quickstart-en.html">UCS
                    Quickstart Guide</ulink> for the first steps about
                installation and initial setup.
            </para>
        </section>

        <section id="testing:test-app-center">
            <title>Test App Center</title>
            <para>
                Switch to the Test App Center Repository and test the app
                directly on the UCS system set up before.
<programlisting>
univention-install univention-appcenter-dev
univention-app dev-use-test-appcenter
</programlisting>
            </para>
        </section>

        <section id="testing:install">
            <title>Install the app</title>
            <para>
                Up until here, the app is available in the Test App Center and
                a UCS system is up and running that is configured against
                the Test App Center. The app can be installed via the &ucsUMC;.
                UMC consists of several modules and one of them is called
                <guimenu>App Center</guimenu>. Open this module and install
                the app from there.
            </para>

            <para>
                <figure id="testing:install:app-center-umc-module">
                    <title>Univention Management Console overview with App Center module</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations43/umc-module-app-center.png"/>
                </figure>
            </para>

            <para>
                The following points are mandatory for the App to be published:
                <itemizedlist>
                    <listitem>
                        <simpara>
                            The App has to install without user interaction.
                            Exceptions are configuration parameters obtained
                            via App Settings (see <xref linkend="app-settings"
                                />).
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            The App may not negatively impact UCS' core services.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            The App has to uninstall without leaving any remainders that interfere with UCS' core services.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>
                            The app is working with the UCS versions that are
                            configured as Supported UCS version (see <xref
                                linkend="create-app-with-docker:supported-ucs-version"
                                />).
                        </simpara>
                    </listitem>
                </itemizedlist>
            </para>

            <para>
                When installing the App, also mind README information that may
                have been defined on the <guimenu>README files</guimenu> in
                the app in the App Provider Portal. An Administrator expects
                an app to be fully configured after the installation. If
                something is needed in order to use the app (e.g., activating
                users for the service), it should be described in the
                appropriate README section (see <xref linkend="readme" />).
            </para>
        </section>

        <section id="testing:upgrade">
            <title>Upgrade the app</title>
            <para>
                Once several versions of the app exist, the upgrade should be
                tested, as well. The App Center UMC module only allows the
                installation of the latest app version. To test an upgrade of
                the app, please go to the console and install a version
                explicitly:

                <programlisting>
                    univention-app install myapp=1.0
                </programlisting>

                Afterwards, go back to the App Center UMC module. There, the
                app should show up with the update symbol indicating the
                availability of an update. Continue and perform
                the app upgrade.
            </para>
        </section>

        <section id="testing:deactive-test-app-center">
            <title>Deactivate the Test App Center</title>
            <para>
                To switch back to the productive App Center, please run:

                <programlisting>
                    univention-app dev-use-test-appcenter --revert
                </programlisting>
            </para>
        </section>

        <section id="testing:automation-for-providers">
            <title>Automated testing for App Providers</title>
            <para>
                Univention always runs automated tests on an app before it
                is released. This testing infrastructure can be used by the app
                provider to increase the test coverage for the app. This can
                save manual testing efforts.
            </para>

        <!--
        TODO: Section about how providers can use testing infrastructure for automated tests.

        * How does automated testing apply to Docker apps?
        * Where can the settings be made?
        * How does it work in principle?
        * What are the requirements?

        https://wiki.univention.de/index.php/Ucs-test is probably not the right
        ressource for the topic, because it requires a debian package.
        -->
            <para>
                A test script for the app can be provided in the
                <guimenu>Testing</guimenu> tab. The script needs to be entered
                in the text area <guimenu>Test script run after
                    installation</guimenu>. It is run together with the
                automatic app tests in the Univention test infrastructure and
                will be executed after the app has been installed during those
                tests.
            </para>
            <para>
                The App Provider Portal offers an example for how the test
                script should look like and an example for how the test script
                can be tested on a UCS system. On successful tests, the script
                has to end with exit code 0.
            </para>
            <para>
                For certain tests user credentials for access to the directory
                service are needed. They are passed with the parameters
                <option>binddn</option> and <option>bindpwd</option>. In many
                cases the user <option>Administrator</option> is used.
            </para>
        </section>
    </section>

    <section id="approval">
        <title>Two-way approval</title>
        <para>
            Testing the app also involves giving an approval for the release
            of the app. Each app in the App Center requires a two-way approval,
            one from the app provider and one from Univention. The app provider
            starts with the process and performs the tests to give the approval
            for its app.
        </para>

        <para>
            The app provider's approval is given by clicking on
            <guimenu>Publish App</guimenu> in the App Provider Portal. The
            Univention App Center team is notified and they will start the
            automated tests. As soon as the automated tests are successful, the
            second approval is available and the app is ready to be released.
        </para>
        <para>
            The automated tests conducted by Univention test for installation,
            un-installation and re-installation of the app for different UCS
            system roles. They check for proper operation of the UCS services.
            No app functionality will be tested. The tests are for ensuring that the
            app does not break UCS functionality.
        </para>
        <para>
            Besides the technical testing, the first release also undergoes a
            manual review process on the app presentation. The app description
            is checked for plausibility, understandability and for the App
            Center context.
        </para>

    </section>

    <section id="release">
        <title>Release</title>
        <para>
            As soon as the app is ready for release, it is copied to the
            productive App Center by the Univention App Center team. This
            involves the app's presentation material as well as the Docker
            image. Univention maintains an own Docker registry. The Docker
            image is copied to that registry and the reference to the Docker
            image is updated accordingly in the app definition. The app will
            be visible in the App Center UMC module immediately for all UCS
            users. The app catalog is updated automatically and shows the new
            app.
        </para>
    </section>

    <section id="updates">
        <title>Updates</title>
        <para>
            After the release of the first version the app enters
            "maintenance mode" and receives updates from the app provider. The
            evolution of an app is represented by its version. In order to
            provide an update for the app, follow these steps:

            <orderedlist>
                <listitem>
                    <simpara>
                        Go to the <guimenu>Apps</guimenu> UMC module in the App
                        Provider Portal and search for the app.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Create a new version of the app: Mouse over the app's
                        tile, click the menu in the upper right corner of the
                        tile and select <guimenu>New App Version</guimenu>.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Enter the values for source and target version. The
                        App Provider Portal will then copy the source app
                        configuration to the target.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Open the new app version and make the appropriate
                        changes, e.g. the version tag for the Docker image.
                        Usual places for changes involve the scripts and maybe
                        the integration. Texts and logos should be checked if
                        they are still up to date.
                    </simpara>
                </listitem>
            </orderedlist>
        </para>

        <para>
            <figure id="app-life-cycle:update:create-new-version">
                <title>Menu for Add a new App</title>
                <graphic scalefit="1" width="28%" fileref="illustrations43/app_portal_create_new_version.png"/>
            </figure>
            <figure id="app-life-cycle:update:new-version">
                <title>Add a new App version</title>
                <graphic scalefit="1" width="28%" fileref="illustrations43/app_portal_new_version.png"/>
            </figure>
        </para>
    </section>

    <section id="termination">
        <title>Termination (end of life)</title>
        <para>
            If the app provider decides to discontinue an app and stop
            maintenance, the app can be terminated by setting it <userinput>end
                of life</userinput>.  As soon as an app is published in status
            end of life, UCS system administrators won't be able to install it
            anymore. UCS systems that already have the app installed, will show
            a notification in the App Center that informs the UCS system
            administrator that they should look for alternative solutions.
        </para>

        <para>
            App versions are not explicitly terminated. They are superseded by
            the next version. The termination applies to the whole app.
        </para>
        <para>
            The app can be terminated by going to the app's configuration in
            the App Provider Portal. Please go to the
            <guimenu>Advanced</guimenu> tab to the section <guimenu>Custom
                entries</guimenu>. Create a new custom entry with the
            <option>Custom key</option> <userinput>EndOfLife</userinput> and
            the <option>Custom value</option> <userinput>True</userinput>.
            Afterwards press <guimenu>Sync to Test App Center</guimenu> and
            <guimenu>Publish App</guimenu>. Please provide a custom message in
            the publish dialog and let the App Center team know about the
            reasons for the termination.
        </para>
    </section>

</chapter>

<chapter id="app-presentation">
    <title>App presentation</title>

    <para>
        This chapter is about how the app is presented to the user with texts,
        logos, screenshots and videos. The contents are part of the app
        configuration. They are shown to the UCS system administrator in the
        App Center UMC module in UCS and to users on the Univention website in
        the <ulink
            url="https://www.univention.com/products/univention-app-center/app-catalog/">App
            Catalog</ulink>.
    </para>

    <section id="logos">
        <title>Logos</title>
        <para>
            All logos uploaded to the App Provider Portal have to be SVG
            format, which is most flexible for the presentation purposes.
        </para>

        <important>
            <para>
                When SVG files are created or exported, please make sure that
                fonts are converted to paths before export. Otherwise the text
                in the logos is not rendered properly and the logo may look
                odd.
            </para>
            <para>
                Please also do not simply import a bitmap graphic into SVG and
                export it. Results after scaling may not look good, because the
                logo is basically a bitmap in SVG apparel.
            </para>
        </important>

        <para>
            The logos can be uploaded on the <guimenu>General</guimenu> tab in
            the <guimenu>Logos</guimenu> section. Two icons are needed: One for
            the app tile on the overview page and a more detailed logo for the
            app page. The tile has only limited space in square format. Please
            make sure, the logo can still be recognized. The detailed logo is
            not limited. Most logos for this slot have a landscape orientation.
            The App Center and the App Catalog take care of the appropriate
            scaling. SVG allows a very good result due to its nature as a vector
            graphics format.
        </para>
    </section>

    <section id="screentshots">
        <title>Screenshots and videos</title>
        <para>
            Screenshots and videos are a good way to introduce the solution to
            the user. To add screenshots please go to the <guimenu>Screenshots
                and videos</guimenu> tab for upload. Screenshots can be in PNG
            or JPG format. Videos have to be published on YouTube and the full
            YouTube link has to be provided in the App Provider Portal. Please
            keep in mind that the screenshots and videos in this tab must be
            for an English speaking audience.
        </para>
        <para>
             If the same screenshots exist in German, it is recommended that
             they are added, as well, in the <guimenu>Translations</guimenu> tab
             in the <guimenu>Screenshots and videos</guimenu> section.
        </para>
        <para>
            Comprehensive visualizations can be added optionally which make it
            easier to understand the app's description. Give the image files
            sensible names including the keywords. An example of a bad file
            name for an image would be “app_76bz3.jpg”, whereas
            “<wordasword>app_name.jpg</wordasword>” would be much better.
        </para>
    </section>

    <section id="description">
        <title>Description</title>
        <para>
            The description is the text introducing the solution to the
            user and thus is very important for getting their attention. Here are
            some tips intended to help to present the app in a
            user-friendly, customer-oriented, and search-engine-optimized
            manner.
            <itemizedlist>
                <listitem>
                    <simpara>
                        Unique content with at least 300 words. Not a copy from
                        the solutions web page.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Content: What does the app do? The added value and
                        benefits should be described and examples be provided.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        The app is running on UCS. What is the added value that
                        the combination of UCS and the app offers to the
                        customer?
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        It is important for the user to understand which
                        "edition" of the solution is installed and what
                        features or limitations are included. Please also
                        provide information on how to "upgrade" to the next
                        "edition".
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        The text should be structured in paragraphs.
                        Subheadings and lists should be used.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Search engines should be kept in mind and keywords be
                        used.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Links should be furnished with all HTML attributes.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        Include supporting images/screenshots and define them
                        in the app configuration (not within description).
                    </simpara>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            The description is provided in HTML format. If more control
            on the HTML is needed, switch to HTML source mode and edit the HTML
            directly.
        </para>
        <note>
            <para>
                Custom styles in CSS should not be used, because they may
                distract from the overall impression. The App Center UMC module and
                the App Catalog already have respective CSS style definitions.
            </para>
        </note>
        <para>
            The length of the description depends on how much there is to say
            and how much explanation the app requires. Ideally the description
            should be at least 300 words long.  The text should be structured
            and paragraphs should be used to make it easier to read. The target group are
            potential customers. Subheadings (HTML: <wordasword>h2,
                h3</wordasword>) should be used to divide the text into logical
            sections. It is very helpful for the reader to be able to see the
            advantages of the app and its combination with UCS at a glance. For
            this reason, presentation of the advantages in lists (HTML:
            <wordasword>ol, ul, li</wordasword>) is particularly practical.
        </para>
        <para>
            If links are used in the app description (e.g., to pages on
            the solution's own website), please always use the
            <userinput>target="_blank"</userinput> (open in new tab) and assign
            the link a title attribute. Please keep the use of links to a
            minimum and ideally use the fields provided especially for this
            purpose in the app metadata.
        </para>
    </section>

    <section id="category">
        <title>Categories</title>
        <para>
            On the <guimenu>General</guimenu> tab the app can be given one or
            more categories from a given set. Users can filter the app overview
            in the App Center and in the App Catalog accordingly. App
            categories help to group apps together by topic and give a better
            overview for the various apps available.
        </para>
    </section>

    <section id="contact">
        <title>Contact</title>
        <para>
            For the users it is important to know who is the producer of the
            app. For this purpose there is the <guimenu>Contact</guimenu> tab
            in the App Provider Portal. Please provide <option>Gerneal product
                contact information</option> like an email address and a
            website to the solution.  Please also link to a website, where the
            app provider's support options and pricing is explained to
            potential customers and place the link in the field <option>Website
                with information regarding support options</option>.
        </para>
    </section>

    <section id="license">
        <title>License</title>
        <para>
            On the <guimenu>License</guimenu> tab license information can be defined; for
            example, a license agreement. This should be read by a
            UCS system administrator and has to be accepted before the
            app is installed. If the text is not accepted, the installation
            process is aborted and no app is installed. The license agreement
            is mostly used by app providers for legal information that needs
            confirmation by the administrator before anything is installed. If
            such a text is not needed, leave it empty.
        </para>
        <para>
            UCS system administrators have to register with a valid email
            address in order to use the App Center. If the app provider
            configures an email address in the field <option>E-mail address for
                App install notifications</option> it receives information on a
            daily basis about who installed the app. The App Center UMC
            module informs the user that the app provider may contact them. App
            providers can use the address, for example, for lead management.
        </para>
        <para>
            The last setting is intended to provide the users a rough
            imagination about the license type of the software. One option
            best fitting to the solution should be chosen:
            <itemizedlist>
                <listitem>
                    <simpara>
                        <userinput>Empty</userinput>: If no value is given, the
                        App Center UMC module and the App Catalog will show the
                        text "Please contact the App provider for further
                        license details".
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <userinput>Free commercial use</userinput>
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <userinput>Free commercial use. Some functions or
                            services are liable to costs.</userinput>
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <userinput>Liable to Costs with Free Trial</userinput>
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <userinput>Liable to Costs</userinput>
                    </simpara>
                </listitem>
            </itemizedlist>
        </para>
    </section>

    <section id="readme">
        <title>README for the administrator</title>
        <para>
            In the tab <guimenu>README files</guimenu> additional information
            for an app can be provided that show up at certain stages of the
            app life cycle. README files are also in HTML like the description
            and content can be provided the same way (see <xref
                linkend="description" />).  The App Provider Portal describes
            when each README file shows up.
        </para>
        <para>
            It is highly recommended to use the README files to show
            information that should not go in the app description, like
            for example configuration details, hints before and after an
            update, etc. Please also keep in mind to provide a proper
            German translation.
        </para>
    </section>

    <section id="translation">
        <title>Translations</title>
        <para>
            All texts, screenshots and videos should be entered in English.
            Translations to German should be only made on the
            <guimenu>Translations</guimenu> tab. It should be made sure that
            translations for the texts that have an English version are
            provided. Otherwise, English text will show up for a user with
            German language settings. Each translation consists of a set of two
            texts, the English version first and second a text field for the
            German translation.
        </para>
    </section>

</chapter>

<chapter id="connection-idm">
    <title>Connection with Identity Management</title>

    <para>
        One of the <wordasword>UCS's</wordasword> key features is the
        integrated identity management (IDM). With this central identity
        management, users benefit, among other things, from a single login
        independent of which services or systems they use. It is highly
        recommended to integrate the app into the identity management system.
    </para>

    <para>
        If the app should benefit from the identity management, the flag
        <guimenu>Add activation checkbox for App in UCS user
            management</guimenu> should be activated in the App Provider Portal
        on the <guimenu>Advanced</guimenu>. This extends the IDM by a checkbox
        and an administrator of the UCS system can activate or deactivate each
        user individually for the app. The setting can then be found in the
        Users UMC module and is called <guimenu>Apps</guimenu>. It is also
        possible to make significantly more complex settings. See <xref
            linkend="user-rights-management" /> for more details.
    </para>

    <section id="provisioning">
        <title>Provisioning</title>

        <para>
            There are different ways in which applications can access
            provisioning information. The following describes a pull and
            push-based procedure.
        </para>

        <section id="provisioning:pull">
            <title>Automatically via LDAP connection (Pull)</title>
            <para>
				UCS stores the user and group information in an OpenLDAP based
				directory. Thus, the default information can be accessed via
				the LDAP protocol. Objects are identified by an LDAP filter.
				The following filter can be used to search for users
				"<wordasword>(univentionObjectType=users/user)</wordasword>" and
				for groups the filter
				"<wordasword>(univentionObjectType=groups/group)</wordasword>"
				can be used.
            </para>
            <para>
				If the user activation is used (<guimenu>Add activation
				checkbox for App in UCS user management</guimenu>), the
				following LDAP filter can be used:
				<wordasword>(&amp;(univentionObjectType=users/user)(myappActivated=TRUE))</wordasword>.
				The string <wordasword>myapp</wordasword> has to be replaced
				with the <wordasword>appid</wordasword>.
            </para>
            <para>
				The parameters for the LDAP server can be read from the environment variables:
				<itemizedlist>
					<listitem>
						<simpara>
							<option>LDAP_SERVER_NAME</option>:
							The fully-qualified host name of the OpenLDAP
							server the app may connect to.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<option>LDAP_SERVER_PORT</option>:
							The port of the OpenLDAP server the app may
							connect to.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<option>LDAP_SERVER_ADDITION</option>:
							A list of alternative OpenLDAP servers. These
							values should be used for failover.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<option>LDAP_BASE</option>:
							The base for the whole LDAP database, e.g.,
							<uri>dc=mydomain,dc=intranet</uri> or
							<uri>o=mydomain</uri>.
						</simpara>
					</listitem>
				</itemizedlist>
				<important>
					<para>
						As a rule, the LDAP base should not be further
						restricted. Many environments store users below
						<uri>cn=users</uri> but this is not the case in all
						environments.
					</para>
				</important>
            </para>

            <para>
				By default, the OpenLDAP server in UCS does not allow
				anonymous connections. For every app a user account is
				created. The account has read access to the LDAP directory.
				The username is passed as the environment variable
				<option>LDAP_HOSTDN</option>. The password is written in the
				file <filename>/etc/machine.secret</filename>. The
				credentials are not changed when an app is upgraded. But they
				change if an app is reinstalled.
            </para>
        </section>

        <section id="provisioning:push">
            <title>Automatically via IDM notifications (Push)</title>
            <para>
				An app can be notified by the IDM system when users or groups
				are created, modified or deleted. For each change, a file is
				created in a specific directory. The app can either poll the
				directory or register a command that is executed when a file
				is created.
            </para>
            <para>
                <ulink
                    url="https://errata.software-univention.de/ucs/4.3/211.html">UCS
                    4.3-1 errata 211</ulink> is required on the user's system
                for this feature.
            </para>
			<section id="provision:push:setup">
				<title>Setup in App configuration</title>
				<para>
					The configuration for these IDM notifications can be done on
					the <guimenu>LDAP Listener</guimenu> tab in the App Provider
					Portal. It can be configured which object types are watched.
					Currently, users and groups are supported.
				</para>
				<para>
					A script should be specified in the App Provider Portal. The
					script is copied from the App Center into the container and
					called there. If a script is already part of the container,
					this script can be called accordingly, e.g.
<programlisting language="sh">
#/bin/sh
/usr/sbin/app-connector
</programlisting>
            	</para>
			</section>
			<section id="provision:push:mechanism">
				<title>How the mechanism works</title>
				<para>
					The JSON files are created in the directory
					<filename>/var/lib/univention-appcenter/apps/$appid/data/listener/</filename>.
					As soon as any attribute of the watched object types is
					changed a JSON file is created in the directory. The script is
					called in a defined and configurable interval by the App
					Center, if at least one JSON file has been written.
					Once the script has finished a JSON file, the script must
					delete the JSON file.
				</para>
				<para>
					All files are JSON with one dictionary and the following content:
					<itemizedlist>
						<listitem>
							<simpara>
								<option>entry_uuid</option>:
								A unique identifier for the object. It does not
								change even if the object is moved. The script
								certainly wants to identify objects by this
								attribute.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<option>dn</option>:
								The distinguished name of the LDAP object.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<option>type</option>:
								The type of the object, i.e., "users/user", or "groups/group".
							</simpara>
						</listitem>
						<listitem>
							<simpara>
								<option>attributes</option>:
								A dictionary of the attributes of this object. The
								content is defined by the UDM (Univention
								Directory Manager) representation of the object.
								If it is null instead, the object has been
								deleted.
							</simpara>
						</listitem>
					</itemizedlist>
				</para>
			</section>
			<section id="provision:push:script">
				<title>What should the script cover?</title>
            	<para>
					<itemizedlist>
						<listitem>
							<simpara>
							     The mechanism does not filter the data. Every
								 change will be saved in JSON files. If only a
								 subset of users, e.g. a certain user type
								 like students, shall be processed, the script
								 should filter on it and only continue with
								 the relevant data.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
                                UCS can "<wordasword>resync</wordasword>" a
                                listener. In this case, each and every object
                                appears once again as a JSON file. The script
                                needs to cover the case where no real
                                modification to the object has been made.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
    							The script has to exit with exit code = 0 on
								success and != 0 on failure.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
    							The script has to delete the JSON file that
								has already been processed. If the files are
								not deleted, the script should detect
								duplicates and make sure to handle the same
								change accordingly.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
    							If a mapping between the <option>entry_uuid</option> of the
								JSON file and the primary user key in the
								solutions database is not possible, consider
								maintaining a mapping table by the script, if
								necessary. The <option>entry_uuid</option> is the only
								attribute that remains the same for an
								object.
							</simpara>
						</listitem>
						<listitem>
							<simpara>
    							It may happen that the same <option>entry_uuid</option> appears
								twice in the set of JSON files. This means
								that multiple modifications on the object have
								been made since the last time your script
								processed the object.
							</simpara>
						</listitem>
					</itemizedlist>
				</para>
			</section>
			<section id="provision:push:json">
				<title>JSON example</title>
            	<para>
					This is an example of a JSON file for a user change. It is
					not complete, but should clarify the idea.
<programlisting language="sh">
{
    "dn": "uid=Administrator,cn=users,dc=sparka-43,dc=intranet",
    "id": "b2f13544-e3cb-1037-810e-23ad4765aade",
    "object": {
        "description": "Built-in account for administering the computer/domain",
        "disabled": "0",
        "displayName": "Administrator",
        "gecos": "Administrator",
        "gidNumber": "5000",
        "groups": [
            "cn=Domain Admins,cn=groups,dc=sparka-43,dc=intranet",
            "cn=Domain Users,cn=groups,dc=sparka-43,dc=intranet",
            "cn=DC Backup Hosts,cn=groups,dc=sparka-43,dc=intranet",
            "cn=Schema Admins,cn=groups,dc=sparka-43,dc=intranet",
            "cn=Enterprise Admins,cn=groups,dc=sparka-43,dc=intranet",
            "cn=Group Policy Creator Owners,cn=groups,dc=sparka-43,dc=intranet",
            "cn=Administrators,cn=Builtin,dc=sparka-43,dc=intranet"
        ],
        "lastname": "Administrator",
        "locked": "0",
        "lockedTime": "0",
        "mailForwardCopyToSelf": "0",
        "mailPrimaryAddress": "admin@sparka-43.intranet",
        "mailUserQuota": "0",
        "password": "{crypt}$6$0kS4GowCZEAJRqWG$8LkK6iBeKFCInoxy9bCG1SFfGpajOy//Zg[...]",
        "passwordexpiry": null,
        "primaryGroup": "cn=Domain Admins,cn=groups,dc=sparka-43,dc=intranet",
        "sambaRID": "500",
        "shell": "/bin/bash",
        "uidNumber": "2002",
        "umcProperty": [
            [
                "appcenterDockerSeen",
                "true"
            ],
            [
                "appcenterSeen",
                "2"
            ],
            [
                "udmUserGridView",
                "default"
            ]
        ],
        "unixhome": "/home/Administrator",
        "unlockTime": "",
        "userexpiry": null,
        "username": "Administrator",
        "webweaverActivated": "TRUE"
    },
    "udm_object_type": "users/user"
}
</programlisting>
				</para>
        </section>
    </section>

    <section id="authentication">
        <title>Authentication</title>

        <para>
			There are different ways in which applications can authenticate
			against the UCS identity management system.
        </para>

        <section id="authentication:ldap">
            <title>LDAP</title>
            <para>
				UCS stores the user and group information in an OpenLDAP based
				directory. Thus, the default information can be accessed via
				the LDAP protocol. Objects are identified by an LDAP filter.
				The following filter can be used to search for users
				"<wordasword>(univentionObjectType=users/user)</wordasword>" and
				for groups the filter
				"<wordasword>(univentionObjectType=groups/group)</wordasword>"
				can be used.
            </para>
            <para>
				If the user activation is used (<guimenu>Add activation
				checkbox for App in UCS user management</guimenu>),
				the following LDAP filter can be used:
				"<wordasword>(&amp;(univentionObjectType=users/user)(myappActivated=TRUE))</wordasword>".
				The string <wordasword>myapp</wordasword> has to be replaced
				with the <wordasword>appid</wordasword>.
            </para>
            <para>
				The parameters for the LDAP server can be read from the
				environment variables:
				<itemizedlist>
					<listitem>
						<simpara>
							<option>LDAP_SERVER_NAME</option>:
							The fully-qualified host name of the OpenLDAP
							server the app may connect to.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<option>LDAP_SERVER_PORT</option>:
							The port of the OpenLDAP server the app may connect to.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<option>LDAP_SERVER_ADDITION</option>:
							A list of alternative OpenLDAP servers. These
							values should be used for failover.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<option>LDAP_BASE</option>:
							The base for the whole LDAP database, e.g.,
							<uri>dc=mydomain,dc=intranet</uri> or
							<uri>o=mydomain</uri>.
						</simpara>
					</listitem>
				</itemizedlist>
				<important>
					<para>
						As a rule, the LDAP basis should not be further
						restricted. Many environments store users below
						<uri>cn=users</uri> but this is not the case in all
						environments.
					</para>
				</important>
            </para>

            <para>
				By default, the OpenLDAP server in UCS does not allow
				anonymous authentications. For every app a user account is
				created. The account has read access to the LDAP directory.
				The username is passed as the environment variable
				<option>LDAP_HOSTDN</option>. The password is written in the
				file <filename>/etc/machine.secret</filename>. The credentials
				are not changed when an app is upgraded. But they change if an
				app is reinstalled.
            </para>
        </section>
<!--
        <section id="authentication:saml">
            <title>SAML</title>
            <para>
            </para>
        </section>
-->
<!--
        <section id="authentication:openid-connect">
            <title>OpenID connect</title>
            <para>
            </para>
        </section>
-->
        <section id="authentication:kerberos">
            <title>Kerberos</title>
            <para>
				UCS integrates a Kerberos server by default. As usual with
				Kerberos, the data for the Kerberos configuration can be
				obtained from DNS. By default, the DNS domain name is
				passed through the <option>DOMAINNAME</option> environment
				variable. The following settings can then be queried via DNS:
				<itemizedlist>
					<listitem>
						<simpara>
							<emphasis>Kerberos Realm</emphasis>:
							It an be queried by the TXT record
							<option>_kerberos.DOMAINNAME</option>.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<emphasis>Kerberos KDC</emphasis>:
							It an be queried by the SRV records
							<option>_kerberos._tcp.DOMAINNAME</option> and
							<option>_kerberos._udp.DOMAINNAME</option>.
						</simpara>
					</listitem>
				</itemizedlist>
            </para>
        </section>
    </section>

    <section id="user-rights-management">
        <title>User rights management</title>
        <para>
            The flag <guimenu>Add activation checkbox for App in UCS user
                management</guimenu> can be activated in the App Provider
            Portal on the <guimenu>Advanced</guimenu>. This adds a checkbox to
            the user administration and a schema
			extension for the IDM is created, so that the status of the
			checkbox is stored in an attribute in the IDM. This allows each
			user to be activated or deactivated separately.
        </para>
        <para>
			If the app requires more settings in the IDM, an own LDAP schema
			can be uploaded into the App Provider Portal <guimenu>Docker /
			Configuration files / Schema extension for LDAP</guimenu>.
        </para>
        <para>
			In this case, it is also possible to create individual extended
            attributes during the setup process. This should be done in the
            join script.  Further information on extended attributes can be
            found in the <ulink
                url="https://docs.software-univention.de/developer-reference.html">Univention
                Developer Reference</ulink>.
        </para>
    </section>
  </section>

</chapter>

<chapter id="app-configurations">
	<title>App configurations</title>
	<para>
		The App Center offers the possibility to add scripts at various
		points during the installation and configuration of the app. The most
		important scripts are described below.
	</para>

	<section id="installation-scripts">
		<title>Installation scripts</title>
		<para>
			During the installation of an app, the so-called preinst script is
			executed first. Afterwards, the account for the Docker container is
			created and the Docker container is started. After that, the setup
			script is called and finally the join script.
		</para>
		<section id="installation:preinst">
			<title>Script called before installation to verify that App may be installed</title>
			<para>
				This script is executed on the UCS host system before the app is
				initialized, even before the app image is downloaded. It is
				also called a preinst script. Its purpose is to check whether
				installation will be successful or not. Any exit code other than 0
				will result in cancellation of the installation process. This
				script is also executed if the app is upgraded.
			</para>
		</section>
		<section id="installation:setup">
			<title>Docker script setup</title>
			<para>
				This script is executed in the Docker container. It is normally
				the heart of the initial app configuration. If the script
				fails (exit code != 0) the installation is aborted.
				<!-- TODO: parameters?-->
			</para>
		</section>
		<section id="installation:joinscript">
			<title>Join script</title>
			<para>
                This script is executed on the UCS host system after the Docker
                container is configured. Please refer the to the <ulink
                    url="https://docs.software-univention.de/developer-reference.html#chap:join">Developer
                    Reference</ulink> about how to write a join script. If it
                runs successfully, the join script may save this information in
                a status file. If this does not happen, the user is constantly
                reminded to re-run the join script. So the join script does not
                need to run successfully. The installation will not be aborted
                at this point. But of course at some point it should run
                through successfully.
			</para>
		</section>
	</section>
	<section id="uninstallation-scripts">
		<title>Uninstallation scripts</title>
		<para>
			During the uninstallation of an app, the so-called prerm script is
			executed first. Afterwards, the account for the Docker container is
			removed and the Docker container is stopped. After that, the
			unjoin script is executed.
		</para>
		<section id="uninstallation:prerm">
			<title>Script called before uninstalling to verify that App may be removed</title>
			<para>
				This script is executed on the UCS host system. It is also
				called as prerm script. Its purpose is to check whether an
				uninstallation is successful or not. For example, the prerm
				may fail if other software still depends on it. Any exit code
				other than 0 will result in cancellation of the uninstallation
				process.
			</para>
		</section>
		<section id="uninstallation:unjoin">
			<title>Unjoin script</title>
			<para>
                This script is executed on the UCS host system after the Docker
                container is removed. See the <ulink
                    url="https://docs.software-univention.de/developer-reference.html">Developer
                    Reference</ulink> for how to write an unjoin script. It
                should revert most (if not all) changes done in the
                join script.  With the notable exception of schema
                registration. An LDAP schema extension should never be removed
                once it was
				registered.
			</para>
		</section>
	</section>

	<section id="upgrade-scripts">
		<title>Upgrade scripts</title>
		<para>
			It may be necessary to move data from the old container to the new
			container when the app container is replaced during an upgrade or
			the app is uninstalled. Therefore, the upgrade scripts can be used.
		</para>
		<section id="upgrade:store_data">
			<title>Docker script store_data</title>
			<para>
				This script is required if data exists in the container which
				should not be removed while the container is replaced with a
				new container or if the app is uninstalled.
				It is not required if all the data is stored outside the container for
				example in a database or a mapped volume.
				This script is executed inside the Docker container and it
				should copy the relevant data to
				<filename>/var/lib/univention-appcenter/apps/$APPID/data/</filename>.
			   	Afterwards, the data can be restored by one of the
				restore_data scripts.
			</para>
		</section>
		<section id="upgrade:restore_data_before_setup">
			<title>Docker script restore_data_before_setup</title>
			<para>
				This script is executed inside the Docker container before the
				setup script is run.
				Its purpose is to restore the data which has been stored by
				the store_data script.
			</para>
		</section>
		<section id="upgrade:restore_data_after_setup">
			<title>Docker script restore_data_after_setup</title>
			<para>
				This script is executed inside the Docker container after the
				setup script is run.
				Its purpose is to restore the data which has been stored by
				the store_data script.
			</para>
		</section>
	</section>

	<section id="app-settings">
		<title>App settings</title>
		<para>
			The App settings allow the user to configure the app during its
			runtime. The App Provider Portal can be used to define which settings
			are displayed to the user. The app can react accordingly to the
			changes.
		</para>
		<para>
			If App settings are defined for an app, the user can reach these
			settings in the app configuration, see <xref linkend="app-configurations:app-settings:button" />).
			<figure id="app-configurations:app-settings:button">
				<title>App settings button</title>
				<graphic scalefit="1" width="80%" fileref="illustrations43/Appcenter-settings-button.png"/>
			</figure>
			An example for an App settings dialog is in <xref linkend="app-configurations:app-settings:example" />).
			<figure id="app-configurations:app-settings:example">
				<title>App settings example</title>
				<graphic scalefit="1" width="80%" fileref="illustrations43/Appcenter-settings-example.png"/>
			</figure>
		</para>
		<para>
			The App settings can be defined on the tab
			<guimenu>Settings</guimenu> in the App Provider Portal.
		</para>
		<section id="app-settings:scripts">
			<title>React on App settings</title>
			<para>
				The settings are saved inside the Docker container in the file
				<filename>/etc/univention/base.conf</filename> in the type
				<wordasword>key: value</wordasword>.
				After the settings are changed, two scripts are executed.
				First, the script <wordasword>configure_host</wordasword>. This script is run on the
				Docker host.
				Second, the <wordasword>configure</wordasword> script is
				executed. It is executed inside the Docker container. In the
				App Provider Portal, the path of the script can be given
				(<guimenu>Configuration script run in the Docker
				Container</guimenu>) or the script code can be uploaded
				(<guimenu>Path to script inside the container
				(absolute)</guimenu>).
			</para>
		</section>
		<section id="app-settings:reference">
			<title>App settings configuration</title>
			<para>
				The App settings are defined in the ini format. The definition
				can be done in the field <guimenu>Settings that can be used to
				configure the app. ini file format</guimenu>. One ini file can
				contain several settings.
			</para>
			<para>
				The name of a setting is the name of the section in the ini
				file, for example
				<programlisting>
[myapp/mysetting]
				</programlisting>
				It is recommended to use the app ID as a prefix. This prevents
				collisions.
			</para>
			<para>
				The type of the attribute is defined with the keyword
				<emphasis>Type</emphasis>. The following types are
				supported:
				<itemizedlist>
					<listitem>
						<simpara>
							<guimenu>String</guimenu> A standard input field
							with no restrictions. This is used by default.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<guimenu>Int</guimenu> A number field which is
							validated accordingly.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<guimenu>Bool</guimenu> A checkbox. The value
							<option>true</option> or <option>false</option> is
							set.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<guimenu>List</guimenu> A widget that lets the
							user choose from a predefined set of values.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<guimenu>Password</guimenu> A password input.
							Note: The content will be stored as clear text
							value inside the Docker container.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<guimenu>File</guimenu> An upload widget. The
							content is stored directly in a file according to
							the definition of the setting.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<guimenu>PasswordFile</guimenu> As a File, but
							shown as a password input.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<guimenu>Status</guimenu> A read-only settings
							that is actually meant as a feedback channel for
							the user. This does not render a widget, but
							instead just writes a text with whatever was
							written into this variable. Writing to it is up to
							the App Provider (e.g., by using the configure
							script).
						</simpara>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				The attribute <guimenu>Description</guimenu> is used to
				define the description of the setting. It is shown next to the
				widget so that the user knows what to do with this form.
				It can be localized by also defining
				<guimenu>Description[de]</guimenu> and so on.
			</para>
			<para>
				The attribute <guimenu>Group</guimenu> can be used to group
				settings. All settings sharing one group will be put under
				that label. The default group is <option>Settings</option>. It
				is also possible to localize it for example
				<guimenu>Group[de]</guimenu>.
			</para>
			<para>
				The attribute <guimenu>Show</guimenu> can be used to define
				when the setting should be shown. By default the setting
				attribute is shown when the app is up and running. It is also
				possible to show the setting attribute during the
				installation. The following values are possible
				<option>Install</option>, <option>Upgrade</option>,
				<option>Remove</option> and <option>Settings</option>. It is possible
				to specify more than one value which must be separated by
				comma.
			</para>
			<para>
				The attribute <guimenu>ShowReadOnly</guimenu> can be used in
				the same way as <guimenu>Show</guimenu>. The difference is
				that the value is not changeable.
			</para>
			<para>
				The attribute <guimenu>InitialValue</guimenu> can be used
				during the installation. If no value for this attribute was
				given during the installation, the defined value is set.
			</para>
			<para>
				The attribute <guimenu>Required</guimenu> can be used to
				define if this setting has to be set or not.
			</para>
			<para>
				The attribute <guimenu>Scope</guimenu> is used to specify if
				the value is set inside the Docker container
				(<option>inside</option>), on the Docker host
				(<option>outside</option>) or on both (<option>inside,
				outside</option>). The default is <option>inside</option>.
			</para>
			<para>
				The attributes <guimenu>Labels</guimenu> and
				<guimenu>Values</guimenu> are used if a type List is
				defined. The attribute <guimenu>Labels</guimenu> defines the
				values shown to the user and the attribute
				<guimenu>Values</guimenu> defines the values which are
				stored.
				The lists are comma separated and should have the same size.
				If a comma is necessary inside a label or value, it can be
				escaped with a \.
			</para>
			<para>
				The attribute <guimenu>Filename</guimenu> can be used to
				define the absolute path where the file should be stored.
				This attribute is needed in case the types <guimenu>File</guimenu> or
				<guimenu>PasswordFile</guimenu> are used.
			</para>
		</section>
		<section id="app-settings:examples">
			<title>App settings examples</title>
			<para>
				This is a minimal settings definition:
				<programlisting>
[myapp/mysetting]
Type = String
Description = This is the description of the setting
Description[de] = Das ist die Beschreibung der Einstellung
				</programlisting>
			</para>
			<para>
				These are two more advanced settings
				<programlisting>
[myapp/myfile]
Type = File
Filename = /opt/myapp/license
Description = License for the App
Description[de] = Lizenz der App
Show = Install, Settings
Group = License and List
Group[de] = Lizenz und Liste
				</programlisting>

				<programlisting>
[myapp/list]
Type = List
Description = List of values
Show = Install
ShowReadOnly = Settings
Values = value1, value2, value3
Labels = Label 1, Label 2, Label 3
InitialValue = value2
Scope = inside, outside
Group = License and List
Group[de] = Lizenz und Liste
				</programlisting>
				The first of these two settings will upload a file to
				<filename>/opt/myapp/license</filename> inside the container. The second will save
				<wordasword>myapp/list: value2</wordasword> (or another value)
				inside the container and on the Docker host. Both settings
				will be shown before the installation. On the App settings
				page, the list setting will be read-only.
			</para>
		</section>
	</section>

    <section id="certificates">
        <title>Certificates</title>
        <para>
            UCS provides a certificate infrastructure for secure communication
            protocols. See <ulink
                url="http://docs.software-univention.de/manual.html#domain:ssl">SSL
                certificate management</ulink> in the UCS manual.
        </para>
        <para>
            Apps may need access to the UCS certificate infrastructure or need
            to be aware of changes to the certificates. Starting with <ulink
                url="https://errata.software-univention.de/ucs/4.3/91.html">UCS
                4.3-0 errata 91</ulink> the Univention App Center provides a
            simple way to manage certificates inside an app.  This is simply a
            new action named <guimenu>update-certificates</guimenu> in the app
            Center which is called automatically during the installation and
            upgrade of apps (but can also be executed manually) and provides apps
            a simple way to gain access to certificates and to react to
            changes to certificates.
        </para>
<programlisting>
# update all apps
-> univention-app update-certificates

# update app "my-app"
-> univention-app update-certificates my-app
</programlisting>

        <para>
            What happens update-certificates?
            <itemizedlist>
                <listitem>
                    <simpara>
                        The UCS root CA certificate is copied to <filename>/usr/local/share/ca-certificates/ucs.crt</filename> inside the container.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        <guimenu>update-ca-certificates</guimenu> is executed inside the container.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        The UCS root CA certificate is copied to <filename>/etc/univention/ssl/ucsCA/CAcert.pem</filename> inside the container.
                    </simpara>
                </listitem>
                <listitem>
                    <simpara>
                        The Docker host UCS certificate is copied to <filename>/etc/univention/ssl/docker-host-certificate/{cert.pem,private.key}</filename> and <filename>/etc/univention/ssl/$FQDN_DOCKER_HOST/{cert.pem,private.key}</filename>.
                    </simpara>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Every app can define a <guimenu>update_certificates</guimenu>
            script.
            <!--
            TODO: @Felix: Where can the app developer place this script in the portal?
            -->
        </para>
        <para>
            Example:
<programlisting>
#!/bin/bash
# cat the UCS root CA to the app's root CA chain
cat /etc/univention/ssl/ucsCA/CAcert.pem >> /opt/my-app/ca-bundle.crt
service my-app-daemon restart
</programlisting>
        </para>

    </section>

<!--
	TODO:
	I haven't documented https://wiki.univention.de/index.php/Integration_with_UCS/Attributes.
	We should decide how to proceed with this.
-->
<!--
	<section id="app-attributes">
	    <title>App attributes</title>
	    <para>
	    </para>
	</section>
-->
</chapter>


<chapter id="app-appliances">
    <title>App Appliances</title>

    <para>
        App Appliances are pre-defined images which consist of the App, the UCS
        management system and the UCS runtime environment. They are run as a
        virtual machine within a hypervisor and are currently provided as
        VMware, VMware ESXi, VirtualBox and KVM images. By default the UCS
        branding is used, but it is possible and recommended to use a custom
        branding.
    </para>

    <section id="app-appliances:create">
        <title>Create an app appliance</title>
        <para>
            To create an appliance, select an app version that has already been
            published and activate the <guimenu>Create App appliance</guimenu>
            checkbox on the <guimenu>Appliance</guimenu> tab. If the solution
            needs a minimum size of memory, please specify the needed mega
            bytes.
        </para>

        <section id="appliance:additional-software">
            <title>Additional software</title>
            <para>
                If the appliance should include additional apps, please specify
                them in the <guimenu>Additional software</guimenu> section.
            </para>
        </section>

        <section id="appliance:customize-setup-wizard">
            <title>Customize setup wizard in appliance</title>
            <para>
                The appliance allows customization of the UCS setup wizard and
                controls which setup pages and setup fields should be hidden. For
                simplicity towards the user, it is recommended to hide the
                <userinput>software</userinput> page and the
                <userinput>basesystem</userinput> setup field.
            </para>
        </section>

        <section id="appliance:customize-app-center">
            <title>Customize app listing in App Center</title>
            <para>
                The listing of apps in the App Center UMC module in the
                appliance can be customized to either whitelist or blacklist
                certain apps. For example, if the solution is a groupware,
                other groupware solutions can be hidden from the overview
                listing. System administrators can only install the whitelisted
                apps or are not allowed to install the black listed apps.
            </para>
        </section>

        <section id="appliance:first-steps">
            <title>First steps information</title>
            <para>
                The appliances are usually configured in such a way that the user
                can start using them right away. In some cases it may be
                necessary to provide some information for the first steps. For
                example, the user needs to know that a user object has to be
                created and activated for the app first. This could be briefly
                described in this section. The German translation should be
                kept in mind and provided.
            </para>
        </section>
      
        <section id="appliance:umc-favorites">
            <title>Customize UMC favorite category</title>
            <para>
                The appliance also allows to customize the UMC modules which
                should be pre-configured for the favorites section in the UCS
                management system. The favorites section comes up first, after
                a UCS system administrator logs onto the UCS management system.
                It is recommended to have the modules
                <userinput>Users</userinput>, <userinput>Groups</userinput> and
                <userinput>App Center</userinput> listed here.
            </para>
        </section>

        <section id="appliance:build">
            <title>Appliance build</title>
            <para>
                As soon as the settings are made, <guimenu>Sync to Test App
                    Center</guimenu>, click the <guimenu>Publish App</guimenu>
                button and provide a custom message to let the Univention team
                know that an appliance is ready to be build. This will create
                a ticket which helps to keep the communication in one place.
            </para>
        </section>

        <section id="appliance:release">
            <title>Test and release</title>
            <para>
                The appliance is automatically built in the Univention build
                infrastructure. After the build is finished, automatic tests will
                be started. Build and testing will approximately need four hours.
            </para>
            <para>
                After the automatic tests have finished successfully, the app
                provider is informed. A link to the appliance download is sent
                and a few days are given for testing. If no veto is
                sent, the Appliance is usually published after the veto
                deadline. After the release, the appliance will show up for
                download on the app page in the App Catalog. App Providers are
                recommended to also place a link to the app detail page from
                their download page. The link is one criteria for the
                recommended apps badge in the App Center overview and the App
                Catalog.
            </para>
        </section>
    </section>

    <section id="branding">
        <title>Custom branding</title>
        <para>
            With a customized branding of an appliance the boot loader, the
            boot splash, the system setup wizard and the portal page can be
            modified. Please look at the screenshots below and the explanations
            of the options that control the look.
        </para>

        <section id="appliance:branding:bootloader">
            <title>Boot loader</title>
            <para>
                The background color can be configured for the boot loader.
                Please define in the <guimenu>Primary appliance color</guimenu>
                setting.
            </para>
            <para>
                <figure id="appliance:branding:bootloader-figure">
                    <title>Boot loader</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations43/Appliance_Branding_Bootloader.png"/>
                </figure>
            </para>
        </section>

        <section id="appliance:branding:bootsplash">
            <title>Boot splash</title>
            <para>
                The boot splash can have a custom background and a logo. The
                logo is defined in <guimenu>Logo in setup wizard</guimenu>.
                Please provide a SVG file and mind the recommendations in <xref
                    linkend="logos" />.
            </para>
            <para>
                The background color is defined in <guimenu>CSS definition of
                    the appliance background</guimenu>. For a black background,
                simply define <userinput>#000000</userinput>. A gradient can
                for example be defined with <userinput>linear-gradient(to
                    bottom, #345279 0%, #1d2c41 100%)</userinput>. For more
                information on how to use a gradient, see <ulink
                    url="https://www.w3schools.com/csSref/func_linear-gradient.asp">CSS
                    linear-gradient() function on
                    <wordasword>w3schools</wordasword></ulink>.
            </para>
            <para>
                <figure id="appliance:branding:bootsplash-figure">
                    <title>Boot splash</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations43/Appliance_Branding_Bootsplash.png"/>
                </figure>
            </para>
        </section>

        <section id="appliance:branding:setup-wizard">
            <title>System setup wizard</title>
            <para>
                The system setup wizard allows several slots to be customized.
                In the <guimenu>Appliance creation</guimenu> section in the App
                Provider Portal, the <guimenu>Appliance name</guimenu> (the
                word "appliance" is automatically appended) can be set. It
                controls the heading in the system setup wizard. Next is the
                <guimenu>Logo for the setup wizard</guimenu>,
                which is shown on the first page of the system setup wizard.
            </para>
            <para>
                In the <guimenu>Branding configuration of the
                    Appliance</guimenu> section, the logo on the top left can
                be changed with the <guimenu>Logo for UMC header</guimenu>
                setting. The <guimenu>Primary appliance color</guimenu>
                controls the background color of the UMC header.
            </para>
            <para>
                The <guimenu>Secondary appliance color</guimenu> is used as
                color for smaller graphical elements throughout the setup
                wizard (see <xref linkend="appliance:branding:umc-branding-figure" />).
            </para>
            <para>
                <figure id="appliance:branding:setup-wizard-figure">
                    <title>System setup first screen</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations43/Appliance_Branding_Setup_Wizard.png"/>
                </figure>
            </para>
            <para>
                <figure id="appliance:branding:umc-branding-figure">
                    <title>System setup summary screen</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations43/Appliance_Branding_UMC.png"/>
                </figure>
            </para>
        </section>

        <section id="appliance:branding:welcome-screen">
            <title>Welcome screen</title>
            <para>
                The welcome screen is shown after the appliance setup has been
                finished and also every time the appliance is started. It
                offers information on how the user can access the appliance. It
                uses settings like the Appliance name and the CSS definition of
                the appliance background. The <guimenu>Logo displayed in the
                    welcome screen</guimenu> needs to be a SVG file that is
                slightly wider than high and which has the fonts converted to
                paths. Please mind the recommendations in <xref linkend="logos"
                    />.
            </para>
            <para>
                Depending on the character of the welcome screen background
                (bright or dark), the <guimenu>Font color for welcome
                    screen</guimenu> should be either set to
                <userinput>White</userinput> or <userinput>Black</userinput>.
            </para>
            <para>
                <figure id="appliance:branding:umc-branding-welcome-screen">
                    <title>Appliance welcome screen</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations43/Appliance_Branding_Welcome_Screen.png"/>
                </figure>
            </para>
        </section>

        <section id="appliance:branding:portal-page">
            <title>Portal page</title>
            <para>
                The branding of the portal page is independent from the other
                sections. The <guimenu>Title as shown on the portal
                    page</guimenu> can be defined and it can be configured if
                the font color shall be black or white. The <guimenu>Logo for
                    the portal page</guimenu> controls which logo shall be set
                in the first tile on the portal page. The background can either
                consist of a background image or a background color or a
                background color gradient as described in <xref
                    linkend="appliance:branding:bootsplash" />.
            </para>
            <para>
                <figure id="appliance:branding:portal-page-figure">
                    <title>Appliance portal page</title>
                    <graphic scalefit="1" width="80%" fileref="illustrations43/Appliance_Branding_Portal_Page.png"/>
                </figure>
            </para>
        </section>

    </section>

</chapter>

</book>
