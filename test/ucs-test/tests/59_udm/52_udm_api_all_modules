#!/usr/share/ucs-test/runner python
# -*- coding: utf-8 -*-
## desc: Test UDM API for users/user module
## exposure: dangerous
## roles: [domaincontroller_master]
## packages: [python-univention-directory-manager]
## bugs: [47316]

from collections import defaultdict
from unittest import main, TestCase
import univention.debug as ud
from univention.udm import Udm
from univention.udm.factory_config import UdmModuleFactoryConfiguration, UdmModuleFactoryConfigurationStorage
import univention.admin.modules


ud.init('/var/log/univention/directory-manager-cmd.log', ud.FLUSH, 0)
ud.set_level(ud.ADMIN, ud.ALL)


class TestUdmGenericVariousModules(TestCase):
	ox_modules = ['oxmail/oxdomain', 'oxmail/oxfolder', 'oxmail/oxlists', 'oxmail/oxmail']
	mail_modules = ['mail/domain', 'mail/folder', 'mail/lists', 'mail/mail']

	@classmethod
	def setUpClass(cls):
		# we want to use only 1 class for all UDM modules and not save anything to disk
		config_storage = UdmModuleFactoryConfigurationStorage(False)
		config_storage._config = {}
		config_storage._load_configuration = lambda: 42
		config = UdmModuleFactoryConfiguration(r'^.*/.*$', 'univention.udm.modules.generic', 'GenericUdm1Module')
		config_storage.register_configuration(config)
		# except if OX is installed - we'll have to use at least one more class
		univention.admin.modules.update()
		cls.avail_modules = sorted([mod for mod in univention.admin.modules.modules.keys()])
		if any(ox_mod in cls.avail_modules for ox_mod in cls.ox_modules):
			cls.ox_installed = True
			for mod_name in cls.ox_modules + cls.mail_modules:
				config_storage.register_configuration(
					UdmModuleFactoryConfiguration(
						r'^{}$'.format(mod_name),
						'univention.udm.modules.mail_all',
						'MailAllUdm1Module'
					)
				)
		else:
			cls.ox_installed = False
		cls.udm = Udm.using_admin(1)
		cls.udm._configuration_storage = config_storage

	def test_load_modules(self):
		print('Loading all modules...')
		mail_and_ox_modules = self.ox_modules + self.mail_modules
		for mod_name in self.avail_modules:
			print('Loading {!r}...'.format(mod_name))
			mod = self.udm.get(mod_name)
			if mod_name in mail_and_ox_modules:
				assert mod.__class__.__name__ == 'MailAllUdm1Module', 'Wrong UDM module, expected {!r}, got {!r}.'.format(
					'MailAllUdm1Module', mod.__class__.__name__)
			else:
				assert mod.__class__.__name__ == 'GenericUdm1Module', 'Wrong UDM module, expected {!r}, got {!r}.'.format(
					'GenericUdm1Module', mod.__class__.__name__)
		print('OK: all modules could be loaded.')
		if self.ox_installed:
			assert len(Udm._module_class_cache) == 2
		else:
			assert len(Udm._module_class_cache) == 1
		assert len(Udm._module_object_cache) == len(self.avail_modules)
		print('OK: class and object caches are used.')
		stats = defaultdict(int)
		for mod_name in self.avail_modules:
			print('Listing objects of type {!r}...'.format(mod_name))
			mod = self.udm.get(mod_name)
			mod.meta.auto_open = False
			num = -1
			for num, obj in enumerate(mod.search()):
				print('{}: {}'.format(num, obj))
			print('OK: found {} objects of type {!r}.'.format(num + 1, mod_name))
			if num > 0:
				stats['mods'] += 1
				stats['objs'] += 1
		print('OK: loaded {objs} objects in {mods} modules.'.format(**stats))


if __name__ == '__main__':
	main(verbosity=2)
