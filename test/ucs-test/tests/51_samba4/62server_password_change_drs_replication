#!/usr/share/ucs-test/runner python
## desc: "Checks if DRS replication works after a server password change"
## roles:
## - domaincontroller_backup
## - domaincontroller_slave
## exposure: dangerous
## packages:
## - univention-samba4

import univention.config_registry
from univention.testing.utils import fail
import subprocess
from univention.testing.ucr import UCSTestConfigRegistry
import univention.uldap
from sys import exit
from univention.testing.udm import UCSTestUDM
from univention.testing.umc import Client
import time

with UCSTestConfigRegistry() as ucr_test:

	ldap_master = ucr_test.get('ldap/master')
	client = Client(ldap_master)
	role = ucr_test.get('server/role')
	
	##server password change
	univention.config_registry.handler_set(['server/password/interval=-1'])

	print 'executing a server password change'
	try:
		cmd = ['/usr/lib/univention-server/server_password_change']
		output = subprocess.check_output(cmd)
		print 'Output of server_password_change:\n%s' % (output)
	except subprocess.CalledProcessError:
		fail( 'Error running server_password_change')
	else:
		output = ''
		timeout = 200
		t = t0 = time.time()
		changed_password = False
		while (t < t0 + timeout) and not changed_password:
			cmd2 = ['/usr/lib/nagios/plugins/check_univention_replication']
			output = subprocess.check_output(cmd2)
			t=time.time()
			if output.find("OK: ") != -1:
				changed_password = True
				print output
		if not changed_password:
			fail('Could not execute a server password change')

	with UCSTestUDM() as udm:
		
		#create user
		try:
			user_dn, user_name = udm.create_user(password = 'univention')
		except Exception:
			fail('Creating user failed: %s' % user_name)
		else:
			print 'Creating user succeeded: %s' % user_name

		#Check if user can be authenticated with current password
		try:
			client.authenticate(user_name,'univention')
		except Exception as e:
			fail('user cant be authenticated')
		else:
			print 'user authenticated'

		#Wait for replication
		samba_found = False
		t = t0 = time.time()
		timeout = 200
		while (not samba_found) and (t < t0 + timeout):
			p2 = subprocess.Popen(['samba-tool user list | grep %s' %(user_name)],shell = True)
			output,error = p2.communicate()
			if output == '':
				time.sleep(5)
				t = time.time()
			elif output != '' and error is None:
				samba_found = True
		
		if not samba_found:
				fail ('user %s could not be found in samba-tool user list'%user_name)


		#prepare for samba password change
		try:
			min_pwd_age = subprocess.check_output('samba-tool domain passwordsettings show | grep "Minimum password age" | sed s/[^0-9]*/""/', shell=True).strip()
			pwd_complexity = subprocess.check_output('samba-tool domain passwordsettings show | grep complexity | sed "s/Password complexity: //"', shell=True).strip()
			p3 = subprocess.Popen(['samba-tool domain passwordsettings set --complexity=off --min-pwd-age=0'],shell=True)
			p3.communicate()
		except Exception:
			fail( 'could not save the samba settings for cleanup')

		#samba setpassword
		try:
			p4 = subprocess.Popen(['samba-tool user setpassword %s --newpassword=univention2'  %(user_name)],shell=True)
			stdout,stderr = p4.communicate()
		except Exception:
			#revert samba passwordsetting changes
			subprocess.Popen(['samba-tool domain passwordsettings set --complexity=%s --min-pwd-age=%s'%(pwd_complexity,min_pwd_age)],shell=True)
			fail('could not set the user password with samba-tool domain passwordsettings')

		#revert samba passwordsetting changes
		subprocess.Popen(['samba-tool domain passwordsettings set --complexity=%s --min-pwd-age=%s'%(pwd_complexity,min_pwd_age)],shell=True)

		#Wait for replication
		print 'Tries to log in with new password'
		password_changes = False
		t = t0 = time.time()
		timeout = 200
		while (not password_changes) and (t < t0 + timeout):
			try:
				client.authenticate(user_name,'univention2')
			except Exception:
				time.sleep(5)
				t = time.time()
				pass
			else:
				password_changes = True

		if not password_changes:
			fail('drs replication does not seem to be working')
	exit(0)

