#!/usr/share/ucs-test/runner python2.7
## desc: tests if users can change their own passwords
## roles:
##  - basesystem
## packages:
##  - python-univention-lib
## exposure: dangerous

from univention.testing.utils import fail
from univention.testing.ucr import UCSTestConfigRegistry
from univention.testing.udm import UCSTestUDM
import univention.testing.strings as uts
import univention.testing.utils as utils
import univention.config_registry

with UCSTestConfigRegistry() as ucr_test:
	ucr_test.load()

	with UCSTestUDM() as udm:

		#Create new helpdesk group
		try:
			helpdesk_dn, helpdeskname = udm.create_group()
		except Exception:
			print 'cant create %s' % helpdeskname
		else:
			print 'created %s' % helpdeskname

		#Create new user
		try:
			user_helpdesk_dn, user_helpdesk_name = udm.create_user(password='univention')
		except Exception:
			fail('Creating user failed:')
		else:
			print 'Creating user succeeded:'

		#Create new user
		try:
			user_protected_dn, user_protected_name = udm.create_user(password='univention')
		except Exception:
			fail('Creating user failed: %s' % user_protected_name)
		else:
			print 'Creating user succeeded: %s' % user_protected_name

		#Create new unprotected user
		try:
			user_unprotected_dn, user_unprotected_name = udm.create_user(password='univention')
		except Exception:
			fail('Creating user failed: %s' % user_unprotected_name)
		else:
			print 'Creating user succeeded: %s' % user_unprotected_name

		#Add user to corresponding group
		try:
			udm.modify_object('groups/group', dn=helpdesk_dn, append={'users': [user_helpdesk_dn]})
		except Exception:
			fail('Adding user to corresponding group failed: %s in %s ' % (helpdeskname, user_helpdesk_name))
		else:
			print 'Adding user to corresponding group successful'

		## Allow users to modify their password in Univention Directory Manager
		univention.config_registry.handler_set([
			'ldap/acl/user/password/change=yes',
			'ldap/acl/user/passwordreset/accesslist/groups/helpdesk=%s' % helpdesk_dn,
			'ldap/acl/user/passwordreset/protected/uid=Administrator,%s' % user_protected_name
		])

		utils.restart_slapd()

		#Check if Administrator can set it's own password
		try:
			udm.modify_object('users/user', binnddn=user_helpdesk_dn, bindpwd='univention', dn=user_helpdesk_dn, set={'password': uts.random_string()})
		except Exception:
			fail('Administrator can not set his own password')
		else:
			print 'Administrator changed his password successfully'

		#Check if protected user can set his own password
		try:
			udm.modify_object('users/user', binddn=user_protected_dn, bindpwd='univention', dn=user_protected_dn, set={'password': uts.random_string()})
		except Exception:
			fail('Protected user %s can not set his own password' % (user_protected_name))
		else:
			print 'Protected user %s changed his password successfully' % (user_protected_name)

		#Check if unprotected user can set his own password
		try:
			udm.modify_object('users/user', binddn=user_unprotected_dn, bindpwd='univention', dn=user_unprotected_dn, set={'password': uts.random_string()})
		except Exception:
			fail('Unprotected usre %s can not set his own password' % (user_unprotected_name))
		else:
			print 'Unprotected user %s changed his password successfully' % (user_unprotected_name)

# vim: set ft=python ts=7 noexpandtab :
