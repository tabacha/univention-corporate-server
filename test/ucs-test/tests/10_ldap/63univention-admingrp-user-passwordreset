#!/usr/share/ucs-test/runner python
## desc: univention-admingrp-user-passwordreset
## roles:
##  - domaincontroller_master
##  - domaincontroller_backup
## packages:
##  - univention-admingrp-user-passwordreset
## exposure: dangerous

import random
import string
import univention.testing.udm as udm_test
from univention.testing.utils import fail
import univention.testing.utils as utils
import univention.config_registry
from univention.testing.ucr import UCSTestConfigRegistry as ConfigRegistry

with udm_test.UCSTestUDM() as udm, ConfigRegistry() as ucr:

	def has_pwd_access(admindn, targetdn):
		passwd = ''.join([random.choice(string.ascii_letters) for n in xrange(12)])
		try:
			udm.modify_object('users/user',
				binddn=admindn,
				bindpwd='univention',
				dn=targetdn,
				set={
					'password': passwd,
					'overridePWHistory': 1,
					'overridePWLength': 1
				})
			return True
		except Exception:
			return False

	def reset_pwd(targetdn, passwd='univention'):
		udm.modify_object('users/user',
			dn=targetdn,
			set={
				'password': passwd,
				'overridePWHistory': 1,
				'overridePWLength': 1
			})

	def has_descr_access(admindn, targetdn):
		adminpwd = 'univention'
		try:
			udm.modify_object('users/user',
				binddn=admindn,
				bindpwd=adminpwd,
				dn=targetdn,
				set={
					'description': 'foo bar'
				})
			return True
		except Exception:
			return False

	admin_dn = 'uid=Administrator,cn=users,%s' % ucr.get('ldap/base')

	# create helpdesk groups
	try:
		hdgroup_a_dn, hdgroup_a = udm.create_group()
	except Exception:
		fail('cannot create helpdesk group', 140)

	try:
		hdgroup_b_dn, hdgroup_b = udm.create_group()
	except Exception:
		fail('cannot create helpdesk group', 140)

	# create helpdesk users
	try:
		hduser_a_dn, hduser_a = udm.create_user()
	except Exception:
		fail('cannot create helpdesk user', 140)

	try:
		hduser_b_dn, hduser_b = udm.create_user()
	except Exception:
		fail('cannot create helpdesk user', 140)

	# add users to corresponding groups
	udm.modify_object('groups/group',
		dn=hdgroup_a_dn,
		append={
			'users': [hduser_a_dn]
		})

	udm.modify_object('groups/group',
		dn=hdgroup_b_dn,
		append={
			'users': [hduser_b_dn]
		})

	# create new test users
	try:
		unprot_user_a_dn, unprot_user_a = udm.create_user()
	except Exception:
		fail('cannot create user', 140)
	try:
		unprot_user_b_dn, unprot_user_b = udm.create_user()
	except Exception:
		fail('cannot create user', 140)

	# create new protected test user
	try:
		prot_user_dn, prot_user = udm.create_user()
	except Exception:
		fail('cannot create user', 140)

	# configure group a
	univention.config_registry.handler_set([
		'ldap/acl/user/passwordreset/accesslist/groups/helpdesk-a=%s' % hdgroup_a_dn,
		'ldap/acl/user/passwordreset/protected/uid=Administrator,%s' % prot_user
	])

	utils.restart_slapd()

	#========== TESTS ==========

	# test if Administrator can set passwords
	print '==> Test 1: can Administrator set passwords'
	for dn in (unprot_user_a_dn, prot_user_dn):
		if not has_pwd_access(admin_dn, dn):
			fail('Administrator cannot set password', 1)

	# test if helpdesk user can set passwords
	print '==> Test 2: can helpdesk user set passwords of unprotected users'
	if not has_pwd_access(hduser_a_dn, unprot_user_a_dn):
		fail('helpdesk user cannot set password of unprotected user', 1)

	print '==> Test 3: can helpdesk user set passwords of protected users'
	for dn in (admin_dn, prot_user_dn):
		if has_pwd_access(hduser_a_dn, dn):
			fail('helpdesk can set password of protected users', 1)

	# do test with two helpdesk groups
	print '==> Testing with two helpdesk groups now.'
	univention.config_registry.handler_set([
		'ldap/acl/user/passwordreset/accesslist/groups/helpdesk-b=%s' % hdgroup_b_dn,
	])

	utils.restart_slapd()

	# test if helpdesk user can set passwords
	print '==> Test 4: can helpdesk user set passwords of unprotected users'
	if not has_pwd_access(hduser_a_dn, unprot_user_a_dn):
		fail('helpdesk user cannot set password of unprotected user', 1)

	print '==> Test 5: can helpdesk user set passwords of protected users'
	for dn in (admin_dn, prot_user_dn):
		if has_pwd_access(hduser_a_dn, dn):
			fail('helpdesk can set password of protected users', 1)

	# test if helpdesk user can set passwords
	print '==> Test 6: can helpdesk user set passwords of unprotected users'
	if not has_pwd_access(hduser_b_dn, unprot_user_b_dn):
		fail('helpdesk user cannot set password of unprotected user', 1)

	print '==> Test 7: can helpdesk user set passwords of protected users'
	for dn in (admin_dn, prot_user_dn):
		if has_pwd_access(hduser_b_dn, dn):
			fail('helpdesk can set password of protected users', 1)

	# test if unprotected user with expired password can be reset
	print '==> Test 8: test if unprotected user with expired password can be reset'
	udm.modify_object('users/user',
		dn=unprot_user_b_dn,
		set={
			'password': 'univention',
			'overridePWHistory': 1,
			'overridePWLength': 1,
			'pwdChangeNextLogin': 1
		})
	if not has_pwd_access(hduser_a_dn, unprot_user_b_dn):
		fail('helpdesk user cannot set password of unprotected user', 1)

	# test if unprotected user with pw expiry policy can be set
	print '==> Test 9: test if unprotected user with pw expiry policy can be set'
	polname = 'pwdpol-ucs-test'
	try:
		udm.create_object('policies/pwhistory',
			position='cn=policies,%s' % ucr.get('ldap/base'),
			set={
				'name': polname,
				'length': 5,
				'expiryInterval': 7,
				'pwLength': 8
			})
	except Exception:
		fail('Creating policies/pwhistory failed', 140)

	try:
		udm.modify_object('users/user',
			dn=unprot_user_b_dn,
			policy_reference='cn=%s,cn=policies,%s' % (polname, ucr.get('ldap/base')))
	except Exception:
		fail('Setting reference of policies/pwhistory object %s to %s failed' % (polname, unprot_user_b), 140)
	if not has_pwd_access(hduser_a_dn, unprot_user_b_dn):
		fail('helpdesk user cannot set password of unprotected user')

	# do test with additional attributes
	# test if helpdesk user can set description BEFORE enabling it
	print '==> Test 10: can helpdesk user set description of unprotected user'
	if has_descr_access(hduser_a_dn, unprot_user_a_dn):
		fail('helpdesk user can set description of unprotected user', 1)

	# test if helpdesk user can set description AFTER enabling it
	univention.config_registry.handler_set([
		'ldap/acl/user/passwordreset/attributes=%s' % (ucr.get('ldap/acl/user/passwordreset/attributes') + ',description')
	])

	utils.restart_slapd()

	if not has_descr_access(hduser_a_dn, unprot_user_a_dn):
		fail('helpdesk user cannot set description of unprotected user', 1)

	# test if unprotected (simple) user can set description of other users
	print '==> Test 12: can unprotected (simple) user set descriptions of other users'
	for user in (hduser_a_dn, admin_dn, hduser_b_dn):
		if has_descr_access(unprot_user_a_dn, user):
			fail('simple user can set descriptions of other users', 1)

	# test if unprotected (simple) user can set password of other users
	print '==> Test 13: can unprotected (simple) user set passwords of other users'
	for user in (hduser_a_dn, admin_dn, hduser_b_dn):
		if has_pwd_access(unprot_user_a_dn, user):
			fail('simple user can set passwords of other users', 1)


# vim: set filetype=python tabstop=4 :
